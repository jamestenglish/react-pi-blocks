{"version":3,"sources":["customBlocks/custom_Blocks.js","customBlocks/required/board_setup_blocks.js","constants/blockConstants.js","helpers/isNullOrEmpty.js","helpers/pinInputGenerators.js","customBlocks/led/led.js","customBlocks/button/button.js","constants/GPIOPins.js","customBlocks/GPIOpins/pins.js","constants/PCF8591Pins.js","customBlocks/virtualBoards/virtualBoardGenerators.js","customBlocks/virtualBoards/PCF8591.js","customBlocks/sensor/sensor.js","features/blockly-toolbox/toolboxCategories.js","features/blockly-toolbox/workspaceDidChangeInner.js","features/blockly-toolbox/BlocklyToolbox.js","socket-config/socket.js","Terminal.js","features/project-manager/ConfirmDeleteDialog.js","features/project-manager/CopyDialog.js","features/project-manager/ProjectListItem.js","features/project-manager/ProjectManager.js","App.js","index.js"],"names":["Blockly","Blocks","init","this","appendDummyInput","appendField","FieldTextInput","appendStatementInput","setCheck","setInputsInline","setColour","setTooltip","setHelpUrl","JavaScript","block","getFieldValue","statementToCode","appendValueInput","setPreviousStatement","valueToCode","Javascript","ORDER_ATOMIC","statementsMain","LED","BUTTON","PIN","PCF8591","SENSOR","COLORS","isNullOrEmpty","input","undefined","console","log","jsBlockly","createGenerators","inputType","color","setGenerator","useText","variableName","FieldVariable","setNextStatement","getGenerator","setOutput","commandGenerator","dropDownArray","validatorFunctionName","validatorFunc","tmpValidatorFunc","FieldDropdown","code","constructorName","pinValue","codeVariableName","variableDB_","getName","Variables","NAME_TYPE","command","isAdditionaParamInput","fieldValue","additionalParamCommands","i","length","obj","blink","dropDownItem","beforeText","afterText","fieldBlock","FieldNumber","fieldName","codeGenerator","blockIn","inputBlock","variableCodeName","arg","additionalParamsArray","Object","keys","reduce","acc","key","mutationToDom","container","document","createElement","setAttribute","domToMutation","xmlElement","additionalParam","getAttribute","updateShape_","validate","newValue","getSourceBlock","hasAdditionalParam","inputExists","getInput","additionalParamMeta","removeInput","buttonCommand","GPIOPins","getGPIOBlockName","prev","curr","name","replaceAll","forEach","option","value","blockName","getPCF8591PinBlockName","pinName","PCF8591Pins","useGenerator","pinType","expanderName","thresholdFieldName","frequencyFieldName","CUSTOM_OPTIONS_OPTION","sensorOptions","CUSTOM_GPIO_OPTION","customGPIOOptions","customOptionsXmlAttributeName","customGPIOXmlAttributeName","CUSTOM_OPTIONS_DUMMY_INPUT","PIN_INPUT","getCustomOptionsFieldName","inputTypeIn","getCustomGPIOFieldName","getHasCustomOptions","getHasCustomGPIO","validateCustomOptions","customOptionsFieldValue","customGPIOFieldValue","customOptionsXmlAttribute","customGPIOXmlAttribute","updateShapeCustomOptionShape_","updateShapeGPIOShape_","validateGPIO","hasCustomOptions","customOptionsDummyInputExists","e","hasCustomGPIO","customGPIODummyInputExists","setAlign","ALIGN_RIGHT","thresholdValue","frequencyValue","args","threshold","freq","pin","argsVariableName","JSON","stringify","GPIOpinBlocks","map","type","PCF8591PinBlocks","toolboxCategories","custom","colour","blocks","workspaceDidChangeInner","workspace","initializedRef","workspaceRef","xml","handleToolboxChange","current","group","groupEnd","newXml","Xml","domToText","workspaceToDom","workspaceToCode","rearrangedCode","prettierCode","prettier","format","parser","plugins","parserBabel","err","error","GPIOPinBlocksLimiters","PCF8591PinBlocksLimiters","blockLimiters","onImportXmlError","useStyles","makeStyles","theme","root","margin","spacing","BlocklyToolbox","toolboxState","useRef","createVariable","createVariableButtonHandler","classes","className","Button","variant","size","onClick","ref","initialXml","wrapperDivClassName","workspaceConfiguration","grid","snap","maxInstances","workspaceDidChange","processToolboxCategory","toolboxCategory","ENDPOINT","window","location","hostname","socket","socketio","connect","reconnect","SocketContext","React","createContext","ConfirmationDialogRaw","props","onClose","open","other","Dialog","disableBackdropClick","disableEscapeKeyDown","maxWidth","aria-labelledby","DialogTitle","id","DialogContent","dividers","DialogActions","autoFocus","GreenButton","withStyles","palette","getContrastText","success","main","backgroundColor","dark","Terminal","isProjectRunning","projectName","projectCode","useState","response","setResponse","setValue","messagesEndRef","setOpen","useContext","useEffect","scrollIntoView","behavior","scrollToBottom","on","data","buf","String","fromCharCode","apply","Uint8Array","buttonBar","width","position","terminalContainer","paddingTop","shutdown","float","startIcon","disabled","emit","setTimeout","keepMounted","dangerouslySetInnerHTML","__html","onSubmit","event","preventDefault","onChange","target","ConfirmDeleteDialog","file","CopyDialog","newFileName","setNewFileName","DialogContentText","TextField","label","fullWidth","ProjectListItem","selectedIndex","index","handleListItemClick","handleDelete","handleCopy","isConfirmDeleteDialogOpen","setIsConfirmDeleteDialogOpen","isCopyDialogOpen","setIsCopyDialogOpen","handleConfirmDeleteDialogClose","useCallback","isConfirmed","handleCopyDialogClose","ListItem","button","selected","ListItemAvatar","Avatar","ListItemText","primary","ListItemSecondaryAction","IconButton","edge","aria-label","listRoot","background","paper","marginLeft","marginRight","flexGrow","formRoot","ProjectManager","handleProjectNameSelection","files","setFiles","inputValue","setInputValue","fileName","setSelectedIndex","handleInputChange","fileList","Grid","item","xs","CircularProgress","List","component","subheader","ListSubheader","noValidate","autoComplete","trim","TabPanel","children","role","hidden","App","setToolboxState","tabValue","setTabValue","setProjectName","setIsProjectRunning","projectNameToUpdate","contents","status","Provider","AppBar","Tabs","Tab","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e88cada8.chunk.js","sourcesContent":["/* eslint-disable prefer-template */\n/* eslint-disable camelcase */\n/* eslint-disable object-shorthand */\n/* eslint-disable func-names */\n/* eslint-disable dot-notation */\nimport Blockly from 'blockly';\n// import jsBlockly from 'blockly/javascript';\nimport 'blockly/javascript';\n\n// const init = () => {\nBlockly.Blocks['new_boundary_function'] = {\n  init: function () {\n    this.appendDummyInput().appendField(\n      new Blockly.FieldTextInput('Boundary Function Name'),\n      'Name'\n    );\n    this.appendStatementInput('Content').setCheck(null);\n    this.setInputsInline(true);\n    this.setColour(315);\n    this.setTooltip('');\n    this.setHelpUrl('');\n  },\n};\n\nBlockly.JavaScript['new_boundary_function'] = function (block) {\n  const text_name = block.getFieldValue('Name');\n  const statements_content = Blockly.JavaScript.statementToCode(\n    block,\n    'Content'\n  );\n  // TODO: Assemble Python into code variable.\n  const code =\n    'def ' + text_name + '(_object,**kwargs):\\n' + statements_content + '\\n';\n  return code;\n};\n\nBlockly.Blocks['return'] = {\n  init: function () {\n    this.appendValueInput('NAME').setCheck(null).appendField('return');\n    this.setInputsInline(false);\n    this.setPreviousStatement(true, null);\n    this.setColour(330);\n    this.setTooltip('');\n    this.setHelpUrl('');\n  },\n};\n\nBlockly.JavaScript['return'] = function (block) {\n  const value_name = Blockly.JavaScript.valueToCode(\n    block,\n    'NAME',\n    Blockly.Javascript.ORDER_ATOMIC\n  );\n  // TODO: Assemble Python into code variable.\n  const code = 'return ' + value_name + '\\n';\n  return code;\n};\n// };\n\n// const initBlocks = () => {\n//   init();\n//   console.log({ Blockly, jsBlockly });\n// };\n// export default initBlocks;\n","/* eslint-disable object-shorthand */\n/* eslint-disable func-names */\n/* eslint-disable dot-notation */\nimport Blockly from 'blockly';\nimport 'blockly/javascript';\n\nBlockly.Blocks['board_setup'] = {\n  init: function () {\n    this.appendDummyInput().appendField('Start');\n    this.setHelpUrl('');\n    this.setColour(50);\n    this.appendStatementInput('MAIN').setCheck(null);\n  },\n};\n\nBlockly.JavaScript['board_setup'] = function (block) {\n  const statementsMain = Blockly.JavaScript.statementToCode(block, 'MAIN');\n  const code = `\n  board.on(\"ready\", () => {\n    ${statementsMain}\n  });\n  `;\n  return code;\n};\n","export const LED = 'LED';\nexport const BUTTON = 'BUTTON';\nexport const PIN = 'PIN';\nexport const PCF8591 = 'PCF8591';\nexport const PIN_PCF8591 = 'PIN_PCF8591';\nexport const SENSOR = 'SENSOR';\n\nexport const COLORS = {\n  [LED]: '#6CB0F2',\n  [BUTTON]: '#6549DA',\n  [PIN]: '#9CDEF6',\n  [PCF8591]: '#FCA481',\n  [SENSOR]: '#123456',\n};\n","const isNullOrEmpty = (input) =>\n  input === null || input === undefined || input === '';\n\nexport default isNullOrEmpty;\n","/* eslint-disable no-underscore-dangle */\n/* eslint-disable func-names */\n/* eslint-disable arrow-body-style */\nimport Blockly from 'blockly';\nimport jsBlockly from 'blockly/javascript';\n\nimport { PIN } from 'constants/blockConstants';\n\nimport isNullOrEmpty from './isNullOrEmpty';\n\nconst createGenerators = ({ inputType, color = 230 }) => {\n  const pinInputBlockSetGenerator = ({ useText, variableName }) => {\n    return function () {\n      this.appendDummyInput().appendField('Make Pin');\n      this.appendValueInput(PIN).setCheck(PIN);\n      this.appendDummyInput().appendField(useText);\n      this.appendDummyInput(inputType).appendField(\n        new Blockly.FieldVariable(variableName, null, [inputType], inputType),\n        inputType\n      );\n      this.setInputsInline(true);\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(color);\n      this.setTooltip('');\n      this.setHelpUrl('');\n    };\n  };\n\n  const pinInputCodeSetGenerator = ({ constructorName }) => {\n    return function (block) {\n      const pinValue = Blockly.JavaScript.valueToCode(\n        block,\n        PIN,\n        Blockly.JavaScript.ORDER_ATOMIC\n      );\n      const codeVariableName = Blockly.JavaScript.variableDB_.getName(\n        block.getFieldValue(inputType),\n        Blockly.Variables.NAME_TYPE\n      );\n\n      if (isNullOrEmpty(pinValue) || isNullOrEmpty(codeVariableName)) {\n        return '';\n      }\n      const code = `${codeVariableName} = new ${constructorName}(${pinValue});\\n`;\n      return code;\n    };\n  };\n\n  const pinInputBlockGetGenerator = ({ variableName }) => {\n    return function () {\n      this.appendDummyInput().appendField(\n        new Blockly.FieldVariable(variableName, null, [inputType], inputType),\n        inputType\n      );\n      this.setOutput(true, inputType);\n      this.setColour(color);\n    };\n  };\n\n  const pinInputCodeGetGenerator = () => {\n    return function (block) {\n      const variableName = Blockly.JavaScript.variableDB_.getName(\n        block.getFieldValue(inputType),\n        Blockly.Variables.NAME_TYPE\n      );\n      const code = variableName;\n      return [code, Blockly.JavaScript.ORDER_ATOMIC];\n    };\n  };\n\n  const pinInputBlockCommandGenerator = ({\n    dropDownArray,\n    variableName,\n    validatorFunctionName = null,\n  }) => {\n    return function () {\n      let validatorFunc = null;\n      if (validatorFunctionName != null) {\n        const tmpValidatorFunc = this[validatorFunctionName];\n        if (tmpValidatorFunc) {\n          validatorFunc = tmpValidatorFunc;\n        }\n      }\n      // this.appendValueInput(inputType).setCheck(inputType).appendField('Make');\n      this.appendDummyInput().appendField('Make');\n      this.appendDummyInput(inputType).appendField(\n        new Blockly.FieldVariable(variableName, null, [inputType], inputType),\n        inputType\n      );\n\n      this.appendDummyInput().appendField(\n        new Blockly.FieldDropdown(dropDownArray, validatorFunc),\n        `${inputType}_COMMAND`\n      );\n      this.setInputsInline(true);\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(color);\n      this.setTooltip('');\n      this.setHelpUrl('');\n    };\n  };\n\n  const pinInputCodeCommandGenerator = () => {\n    return function (block) {\n      const variableName = Blockly.JavaScript.variableDB_.getName(\n        block.getFieldValue(inputType),\n        Blockly.Variables.NAME_TYPE\n      );\n      if (isNullOrEmpty(variableName)) {\n        return '';\n      }\n      const command = block.getFieldValue(`${inputType}_COMMAND`);\n      const code = `${variableName}${command};\\n`;\n      return code;\n    };\n  };\n\n  return {\n    block: {\n      setGenerator: pinInputBlockSetGenerator,\n      getGenerator: pinInputBlockGetGenerator,\n      commandGenerator: pinInputBlockCommandGenerator,\n    },\n    code: {\n      setGenerator: pinInputCodeSetGenerator,\n      getGenerator: pinInputCodeGetGenerator,\n      commandGenerator: pinInputCodeCommandGenerator,\n    },\n  };\n};\n\nconst initBlocks = () => {\n  console.log({ Blockly, jsBlockly });\n};\ninitBlocks();\n\nexport { initBlocks };\n\nexport default createGenerators;\n","/* eslint-disable object-shorthand */\n/* eslint-disable no-underscore-dangle */\n/* eslint-disable func-names */\n/* eslint-disable dot-notation */\nimport Blockly from 'blockly';\nimport 'blockly/javascript';\nimport { LED, COLORS } from 'constants/blockConstants';\n\nimport createGenerators from 'helpers/pinInputGenerators';\nimport isNullOrEmpty from 'helpers/isNullOrEmpty';\n\nconst inputType = LED;\nconst color = COLORS[LED];\n\nconst isAdditionaParamInput = (fieldValue, additionalParamCommands) => {\n  // eslint-disable-next-line no-plusplus\n  for (let i = 0; i < additionalParamCommands.length; i++) {\n    if (fieldValue === additionalParamCommands[i][1]) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst getAdditionParamsArray = (obj) => {\n  const additionalParamsArray = Object.keys(obj).reduce(\n    (acc, key) => [...acc, [obj[key].dropDownItem, key]],\n    []\n  );\n  return additionalParamsArray;\n};\n\nconst { code, block } = createGenerators({ inputType, color });\n\nconst variableName = 'LED Name';\nBlockly.Blocks['set_led'] = {\n  init: block.setGenerator({\n    useText: 'be used for LED named',\n    variableName,\n  }),\n};\n\nBlockly.JavaScript['set_led'] = code.setGenerator({\n  constructorName: 'five.Led',\n});\n\nBlockly.Blocks['get_led'] = {\n  init: block.getGenerator({ variableName }),\n};\n\nBlockly.JavaScript['get_led'] = code.getGenerator();\n\nconst standardCommands = [\n  ['Turn On', '.on()'],\n  ['Turn Off', '.off()'],\n  ['Start Pulsing', '.pulse()'],\n  ['Stop Pulsing', '.stop()'],\n  ['Fade In', '.fadeIn()'],\n  ['Fade Out', '.fadeOut()'],\n];\n\nconst additionalParamCommands = {\n  blink: {\n    dropDownItem: 'Blink',\n    beforeText: 'every',\n    afterText: 'milliseconds',\n    fieldBlock: new Blockly.FieldNumber(500, 0),\n    fieldName: 'BLINK_TIME_IN_MS',\n    codeGenerator: function (blockIn) {\n      const inputBlock = Blockly.JavaScript.valueToCode(\n        blockIn,\n        'LED',\n        Blockly.JavaScript.ORDER_ATOMIC\n      );\n      if (isNullOrEmpty(inputBlock)) {\n        return '';\n      }\n      const variableCodeName = Blockly.JavaScript.variableDB_.getName(\n        inputBlock,\n        Blockly.Variables.NAME_TYPE\n      );\n      const command = blockIn.getFieldValue('LED_COMMAND');\n      const arg = blockIn.getFieldValue('BLINK_TIME_IN_MS');\n      const codeOut = `${variableCodeName}.${command}(${arg});\\n`;\n      return codeOut;\n    },\n  },\n};\n\nconst additionalParamsArray = getAdditionParamsArray(additionalParamCommands);\n\nBlockly.Blocks['led_on_off'] = {\n  init: block.commandGenerator({\n    dropDownArray: [...standardCommands, ...additionalParamsArray],\n    validatorFunctionName: 'validate',\n    variableName,\n  }),\n  mutationToDom: function () {\n    const container = document.createElement('mutation');\n    const fieldValue = this.getFieldValue('LED_COMMAND');\n\n    const hasAdditionalParam = isAdditionaParamInput(\n      fieldValue,\n      additionalParamsArray\n    );\n\n    if (hasAdditionalParam) {\n      container.setAttribute('additionalParam', fieldValue);\n    } else {\n      container.setAttribute('additionalParam', '');\n    }\n    return container;\n  },\n  domToMutation: function (xmlElement) {\n    const additionalParam = xmlElement.getAttribute('additionalParam');\n    this.updateShape_(additionalParam);\n  },\n\n  validate: function (newValue) {\n    this.getSourceBlock().updateShape_(newValue);\n    return newValue;\n  },\n  updateShape_: function (additionalParam) {\n    const hasAdditionalParam = isAdditionaParamInput(\n      additionalParam,\n      additionalParamsArray\n    );\n    const inputExists = this.getInput('ADDITIONAL_PARAM');\n    if (hasAdditionalParam) {\n      if (!inputExists) {\n        const additionalParamMeta = additionalParamCommands[additionalParam];\n        const {\n          beforeText,\n          fieldBlock,\n          fieldName,\n          afterText,\n        } = additionalParamMeta;\n        this.appendDummyInput('ADDITIONAL_PARAM')\n          .appendField(beforeText)\n          .appendField(fieldBlock, fieldName)\n          .appendField(afterText);\n      }\n    } else if (inputExists) {\n      this.removeInput('ADDITIONAL_PARAM');\n    }\n  },\n};\n\nBlockly.JavaScript['led_on_off'] = function (blockIn) {\n  const fieldValue = blockIn.getFieldValue('LED_COMMAND');\n\n  const hasAdditionalParam = isAdditionaParamInput(\n    fieldValue,\n    additionalParamsArray\n  );\n  if (hasAdditionalParam) {\n    return additionalParamCommands[fieldValue].codeGenerator(blockIn);\n  }\n  return code.commandGenerator()(blockIn);\n};\n","/* eslint-disable no-underscore-dangle */\n/* eslint-disable prefer-template */\n/* eslint-disable camelcase */\n/* eslint-disable object-shorthand */\n/* eslint-disable func-names */\n/* eslint-disable dot-notation */\nimport Blockly from 'blockly';\nimport 'blockly/javascript';\nimport { BUTTON, COLORS } from 'constants/blockConstants';\n\nimport createGenerators from 'helpers/pinInputGenerators';\n\nconst inputType = BUTTON;\nconst color = COLORS[BUTTON];\nconst variableName = 'Button Name';\n\nconst { code, block } = createGenerators({ inputType, color });\n\nBlockly.Blocks['set_button'] = {\n  init: block.setGenerator({\n    useText: 'be used for Button named',\n    variableName,\n  }),\n};\n\nBlockly.JavaScript['set_button'] = code.setGenerator({\n  constructorName: 'five.Button',\n});\n\nBlockly.Blocks['get_button'] = {\n  init: block.getGenerator({\n    variableName,\n  }),\n};\n\nBlockly.JavaScript['get_button'] = code.getGenerator();\n\nBlockly.Blocks['button_on_off'] = {\n  init: function () {\n    this.appendDummyInput().appendField('When');\n    this.appendDummyInput(inputType).appendField(\n      new Blockly.FieldVariable(variableName, null, [inputType], inputType),\n      inputType\n    );\n    // this.appendValueInput('BUTTON').setCheck('BUTTON').appendField('When');\n    this.appendDummyInput()\n      .appendField('is')\n      .appendField(\n        new Blockly.FieldDropdown(\n          [\n            ['Down', 'down'],\n            ['Up', 'up'],\n            ['Hold', 'hold'],\n          ]\n          // this.validate\n        ),\n        'BUTTON_COMMAND'\n      );\n    this.appendStatementInput('BUTTON_STMT').setCheck(null);\n\n    this.setColour(color);\n    this.setInputsInline(true);\n    this.setPreviousStatement(true, null);\n    this.setNextStatement(true, null);\n    this.setTooltip('');\n    this.setHelpUrl('');\n  },\n  // mutationToDom: function () {\n  //   var container = document.createElement(\"mutation\");\n  //   var holdInput = this.getFieldValue(\"BUTTON_COMMAND\") === \"hold\";\n  //   container.setAttribute(\"hold_input\", holdInput);\n  //   return container;\n  // },\n  // domToMutation: function (xmlElement) {\n  //   var holdInput = xmlElement.getAttribute(\"hold_input\") === \"true\";\n  //   this.updateShape_(holdInput);\n  // },\n\n  // validate: function (newValue) {\n  //   const holdInput = newValue === \"hold\";\n  //   this.getSourceBlock().updateShape_(holdInput);\n  //   return newValue;\n  // },\n  // updateShape_: function (holdInput) {\n\n  //   const inputExists = this.getInput(\"WAIT_TIME\");\n  //   if (holdInput) {\n  //     if (!inputExists) {\n  //       this.appendDummyInput(\"WAIT_TIME\")\n  //         .appendField(\"for\")\n  //         .appendField(new Blockly.FieldNumber(500, 0), \"WAIT_TIME_IN_MS\")\n  //         .appendField(\"milliseconds\");\n  //     }\n  //   } else if (inputExists) {\n  //     this.removeInput(\"WAIT_TIME\");\n  //   }\n  // },\n};\n\nBlockly.JavaScript['button_on_off'] = function (blockIn) {\n  const buttonCommand = blockIn.getFieldValue('BUTTON_COMMAND');\n\n  const statementsMain = Blockly.JavaScript.statementToCode(\n    blockIn,\n    'BUTTON_STMT'\n  );\n\n  const codeVariableName = Blockly.JavaScript.variableDB_.getName(\n    blockIn.getFieldValue(inputType),\n    Blockly.Variables.NAME_TYPE\n  );\n\n  const codeOut = `\n  ${codeVariableName}.on(\"${buttonCommand}\", () => {\n    ${statementsMain}\n  });\n  `;\n\n  return codeOut;\n};\n","const GPIOPins = [\n  ['#4', 'P1-7'],\n  ['#5', 'P1-29'],\n  ['#6', 'P1-31'],\n  ['#12', 'P1-32'],\n  ['#13', 'P1-33'],\n  ['#16', 'P1-36'],\n  ['#17', 'P1-11'],\n  ['#18', 'P1-12'],\n  ['#19', 'P1-35'],\n  ['#20', 'P1-38'],\n  ['#21', 'P1-40'],\n  ['#23', 'P1-16'],\n  ['#24', 'P1-18'],\n  ['#25', 'P1-22'],\n  ['#26', 'P1-37'],\n  ['#27', 'P1-13'],\n];\n\nconst gpioMap = GPIOPins.reduce((prev, curr) => {\n  return {\n    ...prev,\n    [curr[0]]: curr[1],\n  };\n}, {});\n\nconst getGPIOBlockName = (name) => `pin_${name.replaceAll('#', '')}`;\n\nexport default GPIOPins;\n\nexport { gpioMap, getGPIOBlockName };\n","/* eslint-disable dot-notation */\n/* eslint-disable func-names, object-shorthand */\nimport Blockly from 'blockly';\nimport 'blockly/javascript';\n\nimport { PIN, COLORS } from 'constants/blockConstants';\nimport GPIOPins, { getGPIOBlockName } from 'constants/GPIOPins';\n\nGPIOPins.forEach((option) => {\n  const [name, value] = option;\n  const blockName = getGPIOBlockName(name);\n\n  Blockly.Blocks[blockName] = {\n    init: function () {\n      this.appendDummyInput().appendField(`Pin ${name}`);\n      this.setOutput(true, PIN);\n      this.setColour(COLORS[PIN]);\n      this.setTooltip('');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blockly.JavaScript[blockName] = function () {\n    const code = `'${value}'`;\n    return [code, Blockly.JavaScript.ORDER_ATOMIC];\n  };\n});\n\n// Blockly.Blocks['pin_a'] = {\n//   init: function () {\n//     this.appendDummyInput().appendField('Pin');\n//     this.setOutput(true, PIN);\n//     this.setColour(230);\n//     this.setTooltip('');\n//     this.setHelpUrl('');\n//   },\n// };\n\n// Blockly.JavaScript['pin_a'] = function () {\n//   const code = `'pin_a'`;\n//   return [code, Blockly.JavaScript.ORDER_ATOMIC];\n// };\n","const PCF8591Pins = ['A0', 'A1', 'A2', 'A3'];\n\nconst getPCF8591PinBlockName = (pinName) => `pin_PCF8591_${pinName}`;\n\nexport default PCF8591Pins;\n\nexport { getPCF8591PinBlockName };\n","/* eslint-disable object-shorthand */\n/* eslint-disable no-underscore-dangle */\n/* eslint-disable func-names */\n/* eslint-disable dot-notation */\nimport Blockly from 'blockly';\nimport 'blockly/javascript';\nimport isNullOrEmpty from 'helpers/isNullOrEmpty';\n\nconst createGenerators = ({ inputType, color }) => {\n  const virtualBoardBlockSetGenerator = ({ variableName, useText }) =>\n    function () {\n      this.appendDummyInput().appendField(useText);\n      this.appendDummyInput(inputType).appendField(\n        new Blockly.FieldVariable(variableName, null, [inputType], inputType),\n        inputType\n      );\n      this.setInputsInline(true);\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(color);\n      this.setTooltip('');\n      this.setHelpUrl('');\n    };\n\n  const virtualBoardCodeSetGenerator = ({ expanderName }) =>\n    function (block) {\n      const codeVariableName = Blockly.JavaScript.variableDB_.getName(\n        block.getFieldValue(inputType),\n        Blockly.Variables.NAME_TYPE\n      );\n\n      const codeOut = `${codeVariableName} = new five.Board.Virtual(\n        new five.Expander(\"${expanderName}\")\n      );`;\n      return codeOut;\n    };\n\n  const virtualBoardBlockGetGenerator = ({ variableName }) =>\n    function () {\n      this.appendDummyInput().appendField(\n        new Blockly.FieldVariable(variableName, null, [inputType], inputType),\n        inputType\n      );\n      this.setOutput(true, inputType);\n      this.setColour(color);\n    };\n\n  const virtualBoardCodeGetGenerator = () =>\n    function (block) {\n      const codeVariableName = Blockly.JavaScript.variableDB_.getName(\n        block.getFieldValue(inputType),\n        Blockly.Variables.NAME_TYPE\n      );\n      const codeOut = codeVariableName;\n      return [codeOut, Blockly.JavaScript.ORDER_ATOMIC];\n    };\n\n  const virtualBoardBlockUseGenerator = ({ variableName, pinType }) =>\n    function () {\n      this.appendDummyInput().appendField('Use');\n      this.appendDummyInput(inputType).appendField(\n        new Blockly.FieldVariable(variableName, null, [inputType], inputType),\n        inputType\n      );\n      this.appendDummyInput().appendField('with PIN');\n      this.appendValueInput(pinType).setCheck(pinType);\n      this.appendStatementInput(`${inputType}_STMT`).setCheck(null);\n\n      this.setColour(color);\n      this.setInputsInline(true);\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setTooltip('');\n      this.setHelpUrl('');\n    };\n\n  const virtualBoardCodeUseGenerator = ({ pinType }) =>\n    function (blockIn) {\n      const statementsMain = Blockly.JavaScript.statementToCode(\n        blockIn,\n        `${inputType}_STMT`\n      );\n\n      const pinValue = Blockly.JavaScript.valueToCode(\n        blockIn,\n        pinType,\n        Blockly.JavaScript.ORDER_ATOMIC\n      );\n\n      const codeVariableName = Blockly.JavaScript.variableDB_.getName(\n        blockIn.getFieldValue(inputType),\n        Blockly.Variables.NAME_TYPE\n      );\n\n      if (isNullOrEmpty(pinValue) || isNullOrEmpty(codeVariableName)) {\n        return '';\n      }\n\n      const codeOut = `(() => {\n        const additionalParams = {\n          pin: ${pinValue},\n          board: '${codeVariableName}'\n          \n        };\n        ${statementsMain}\n      })();\n      `;\n\n      return codeOut;\n    };\n\n  return {\n    block: {\n      setGenerator: virtualBoardBlockSetGenerator,\n      getGenerator: virtualBoardBlockGetGenerator,\n      useGenerator: virtualBoardBlockUseGenerator,\n    },\n    code: {\n      setGenerator: virtualBoardCodeSetGenerator,\n      getGenerator: virtualBoardCodeGetGenerator,\n      useGenerator: virtualBoardCodeUseGenerator,\n    },\n  };\n};\n\nexport default createGenerators;\n","/* eslint-disable object-shorthand */\n/* eslint-disable no-underscore-dangle */\n/* eslint-disable func-names */\n/* eslint-disable dot-notation */\nimport Blockly from 'blockly';\nimport 'blockly/javascript';\n\nimport { PCF8591, PIN_PCF8591, COLORS } from 'constants/blockConstants';\nimport PCF8591Pins, { getPCF8591PinBlockName } from 'constants/PCF8591Pins';\n\nimport createGenerators from './virtualBoardGenerators';\n\nconst inputType = PCF8591;\nconst color = COLORS[PCF8591];\n\nconst variableName = 'PCF9581 (ADC) Name';\nconst pinType = PIN_PCF8591;\nconst useText = 'Create PCF8591 (ADC) named:';\nconst expanderName = 'PCF8591';\n\nPCF8591Pins.forEach((pinName) => {\n  const blockName = getPCF8591PinBlockName(pinName);\n\n  Blockly.Blocks[blockName] = {\n    init: function () {\n      this.appendDummyInput().appendField(`PCF8591 Pin ${pinName}`);\n      this.setOutput(true, pinType);\n      this.setColour(color);\n      this.setTooltip('');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blockly.JavaScript[blockName] = function () {\n    const code = `'${pinName}'`;\n    return [code, Blockly.JavaScript.ORDER_ATOMIC];\n  };\n});\n\nconst { code, block } = createGenerators({ inputType, color });\n\nBlockly.Blocks['set_PCF8591'] = {\n  init: block.setGenerator({\n    useText,\n    variableName,\n  }),\n};\n\nBlockly.JavaScript['set_PCF8591'] = code.setGenerator({\n  expanderName,\n});\n\nBlockly.Blocks['get_PCF8591'] = {\n  init: block.getGenerator({ variableName }),\n};\n\nBlockly.JavaScript['get_PCF8591'] = code.getGenerator();\n\nBlockly.Blocks['use_PCF8591'] = {\n  init: block.useGenerator({ variableName, pinType }),\n};\n\nBlockly.JavaScript['use_PCF8591'] = code.useGenerator({ pinType });\n","/* eslint-disable no-underscore-dangle */\n/* eslint-disable prefer-template */\n/* eslint-disable camelcase */\n/* eslint-disable object-shorthand */\n/* eslint-disable func-names */\n/* eslint-disable dot-notation */\nimport Blockly from 'blockly';\nimport 'blockly/javascript';\nimport { SENSOR, PIN, COLORS } from 'constants/blockConstants';\n\nimport isNullOrEmpty from 'helpers/isNullOrEmpty';\n\nconst inputType = SENSOR;\nconst color = COLORS[SENSOR];\nconst variableName = 'Sensor Name';\nconst createText = 'Create Sensor';\nconst thresholdFieldName = 'THRESHOLD';\nconst frequencyFieldName = 'FREQUENCY_IN_MS';\nconst CUSTOM_OPTIONS_OPTION = 'custom options';\nconst sensorOptions = [\n  ['defaults', 'defaults'],\n  [CUSTOM_OPTIONS_OPTION, CUSTOM_OPTIONS_OPTION],\n];\n\nconst CUSTOM_GPIO_OPTION = 'gpio_yes';\nconst customGPIOOptions = [\n  ['No', 'gpio_no'],\n  ['Yes', CUSTOM_GPIO_OPTION],\n];\nconst customOptionsXmlAttributeName = 'customOptions';\nconst customGPIOXmlAttributeName = 'customGPIO';\nconst CUSTOM_OPTIONS_DUMMY_INPUT = 'CUSTOM_OPTIONS_DUMMY_INPUT';\nconst PIN_INPUT = 'PIN_INPUT';\n\nconst getCustomOptionsFieldName = (inputTypeIn) =>\n  `${inputTypeIn}_CUSTOM_OPTIONS`;\n\nconst getCustomGPIOFieldName = (inputTypeIn) => `${inputTypeIn}_CUSTOM_GPIO`;\n\nconst getHasCustomOptions = (fieldValue) =>\n  fieldValue === CUSTOM_OPTIONS_OPTION;\n\nconst getHasCustomGPIO = (fieldValue) => fieldValue === CUSTOM_GPIO_OPTION;\n\nBlockly.Blocks['set_sensor'] = {\n  init: function () {\n    this.appendDummyInput()\n      .appendField(createText)\n      .appendField(\n        new Blockly.FieldVariable(variableName, null, [inputType], inputType),\n        inputType\n      )\n\n      .appendField('with')\n      .appendField(\n        new Blockly.FieldDropdown(sensorOptions, this.validateCustomOptions),\n        getCustomOptionsFieldName(inputType)\n      );\n    this.setInputsInline(true);\n    this.setPreviousStatement(true, null);\n    this.setNextStatement(true, null);\n    this.setColour(color);\n    this.setTooltip('');\n    this.setHelpUrl('');\n  },\n  mutationToDom: function () {\n    const container = document.createElement('mutation');\n    const customOptionsFieldValue = this.getFieldValue(\n      getCustomOptionsFieldName(inputType)\n    );\n    const hasCustomOptions = getHasCustomOptions(customOptionsFieldValue);\n\n    if (hasCustomOptions) {\n      container.setAttribute(\n        customOptionsXmlAttributeName,\n        customOptionsFieldValue\n      );\n\n      const customGPIOFieldValue = this.getFieldValue(\n        getCustomGPIOFieldName(inputType)\n      );\n\n      const hasCustomGPIO = getHasCustomGPIO(customGPIOFieldValue);\n\n      if (hasCustomGPIO) {\n        container.setAttribute(\n          customGPIOXmlAttributeName,\n          customGPIOFieldValue\n        );\n      }\n    } else {\n      container.setAttribute(customOptionsXmlAttributeName, '');\n      container.setAttribute(customGPIOXmlAttributeName, '');\n    }\n    return container;\n  },\n  domToMutation: function (xmlElement) {\n    const customOptionsXmlAttribute = xmlElement.getAttribute(\n      customOptionsXmlAttributeName\n    );\n\n    const customGPIOXmlAttribute = xmlElement.getAttribute(\n      customGPIOXmlAttributeName\n    );\n    this.updateShapeCustomOptionShape_(customOptionsXmlAttribute);\n    this.updateShapeGPIOShape_(customGPIOXmlAttribute);\n  },\n\n  validateCustomOptions: function (newValue) {\n    this.getSourceBlock().updateShapeCustomOptionShape_(newValue);\n    return newValue;\n  },\n  validateGPIO: function (newValue) {\n    this.getSourceBlock().updateShapeGPIOShape_(newValue);\n    return newValue;\n  },\n  updateShapeCustomOptionShape_: function (customOptionsXmlAttribute) {\n    const hasCustomOptions = getHasCustomOptions(customOptionsXmlAttribute);\n\n    const customOptionsDummyInputExists = this.getInput(\n      CUSTOM_OPTIONS_DUMMY_INPUT\n    );\n\n    if (hasCustomOptions) {\n      if (!customOptionsDummyInputExists) {\n        this.setInputsInline(false);\n        this.appendDummyInput(CUSTOM_OPTIONS_DUMMY_INPUT)\n          .appendField(' Threshold:')\n          .appendField(new Blockly.FieldNumber(1, 1, 1023), thresholdFieldName)\n          .appendField(' and Frequency:')\n          .appendField(new Blockly.FieldNumber(25, 1), frequencyFieldName) // ;\n          // this.appendDummyInput(`${CUSTOM_OPTIONS_DUMMY_INPUT}_A`)\n          .appendField(' Use GPIO?')\n          .appendField(\n            new Blockly.FieldDropdown(customGPIOOptions, this.validateGPIO),\n            getCustomGPIOFieldName(inputType)\n          );\n      }\n    } else if (customOptionsDummyInputExists) {\n      this.removeInput(CUSTOM_OPTIONS_DUMMY_INPUT);\n      //   this.removeInput(`${CUSTOM_OPTIONS_DUMMY_INPUT}_A`);\n      try {\n        this.removeInput(PIN_INPUT);\n      } catch (e) {\n        console.log(e);\n      }\n      this.setInputsInline(true);\n    }\n  },\n  updateShapeGPIOShape_: function (customGPIOXmlAttribute) {\n    const hasCustomGPIO = getHasCustomGPIO(customGPIOXmlAttribute);\n\n    const customGPIODummyInputExists = this.getInput(PIN_INPUT);\n\n    if (hasCustomGPIO) {\n      if (!customGPIODummyInputExists) {\n        this.appendValueInput(PIN_INPUT)\n          .setCheck(PIN)\n          .setAlign(Blockly.ALIGN_RIGHT)\n          .appendField('GPIO Pin');\n      }\n    } else if (customGPIODummyInputExists) {\n      this.removeInput(PIN_INPUT);\n    }\n  },\n};\n\nBlockly.JavaScript['set_sensor'] = function (block) {\n  const codeVariableName = Blockly.JavaScript.variableDB_.getName(\n    block.getFieldValue(inputType),\n    Blockly.Variables.NAME_TYPE\n  );\n\n  if (isNullOrEmpty(variableName)) {\n    return '';\n  }\n\n  const thresholdValue = block.getFieldValue(thresholdFieldName);\n\n  const frequencyValue = block.getFieldValue(frequencyFieldName);\n\n  const pinValue = Blockly.JavaScript.valueToCode(\n    block,\n    PIN_INPUT,\n    Blockly.JavaScript.ORDER_ATOMIC\n  );\n\n  const args = {};\n  if (!isNullOrEmpty(thresholdValue)) {\n    args.threshold = thresholdValue;\n  }\n  if (!isNullOrEmpty(frequencyValue)) {\n    args.freq = frequencyValue;\n  }\n  if (!isNullOrEmpty(pinValue)) {\n    args.pin = pinValue.replaceAll(\"'\", '');\n  }\n\n  console.log({ args });\n  const argsVariableName = `${codeVariableName}__ARGS`;\n\n  const code = `\n    let ${argsVariableName} = ${JSON.stringify(args)};\n    try {\n        ${argsVariableName} = {\n            ...additionalParams,\n            ...${argsVariableName}\n        } ;\n    } catch(e) {} // do nothing\n\n    ${codeVariableName} = new five.Sensor(${argsVariableName});`;\n  return code;\n};\n","import {\n  LED,\n  BUTTON,\n  PIN,\n  PCF8591,\n  SENSOR,\n  COLORS,\n} from 'constants/blockConstants';\nimport GPIOPins, { getGPIOBlockName } from 'constants/GPIOPins';\nimport PCF8591Pins, { getPCF8591PinBlockName } from 'constants/PCF8591Pins';\n\nconst GPIOpinBlocks = GPIOPins.map((option) => {\n  const [name] = option;\n  const blockName = getGPIOBlockName(name);\n  return {\n    type: blockName,\n  };\n});\n\nconst PCF8591PinBlocks = PCF8591Pins.map((name) => {\n  const blockName = getPCF8591PinBlockName(name);\n\n  return {\n    type: blockName,\n  };\n});\n\nconst toolboxCategories = [\n  {\n    name: 'Variables',\n    custom: 'VARIABLE',\n    colour: '#a55b80',\n  },\n  {\n    name: 'Logic',\n    colour: '#5C81A6',\n    blocks: [\n      { type: 'controls_if' },\n      { type: 'logic_compare' },\n      { type: 'logic_operation' },\n      { type: 'logic_negate' },\n      { type: 'logic_boolean' },\n      { type: 'logic_null' },\n      { type: 'logic_ternary' },\n    ],\n  },\n  {\n    name: 'Math',\n    colour: '#5CA65C',\n    blocks: [\n      { type: 'math_number' },\n\n      { type: 'math_arithmetic' },\n\n      { type: 'math_single' },\n\n      { type: 'math_trig' },\n\n      { type: 'math_constant' },\n      { type: 'math_number_property' },\n\n      { type: 'math_round' },\n\n      { type: 'math_on_list' },\n\n      { type: 'math_modulo' },\n\n      { type: 'math_constrain' },\n\n      { type: 'math_random_int' },\n\n      { type: 'math_random_float' },\n    ],\n  },\n\n  {\n    name: 'Text',\n    colour: '#5CA65C',\n    blocks: [\n      {\n        type: 'text',\n      },\n      { type: 'text_print' },\n      {\n        type: 'text_join',\n      },\n      {\n        type: 'text_append',\n      },\n      {\n        type: 'text_length',\n      },\n      {\n        type: 'text_isEmpty',\n      },\n      {\n        type: 'text_indexOf',\n      },\n      {\n        type: 'text_charAt',\n      },\n      {\n        type: 'text_getSubstring',\n      },\n      {\n        type: 'text_changeCase',\n      },\n      {\n        type: 'text_trim',\n      },\n    ],\n  },\n  {\n    name: 'Loops',\n    colour: '#5ba55b',\n    blocks: [\n      { type: 'controls_repeat_ext' },\n      { type: 'controls_whileUntil' },\n      { type: 'controls_for' },\n      { type: 'controls_forEach' },\n      { type: 'controls_flow_statements' },\n    ],\n  },\n  {\n    name: 'Required',\n    colour: '#5CA699',\n    blocks: [\n      {\n        type: 'board_setup',\n      },\n    ],\n  },\n  {\n    name: 'Pins',\n    colour: COLORS[PIN],\n    blocks: GPIOpinBlocks,\n  },\n\n  {\n    name: 'LED',\n    colour: COLORS[LED],\n    blocks: [\n      {\n        type: 'set_led',\n      },\n      {\n        type: 'get_led',\n      },\n      {\n        type: 'led_on_off',\n      },\n    ],\n  },\n  {\n    name: 'Button',\n    colour: COLORS[BUTTON],\n    blocks: [\n      {\n        type: 'set_button',\n      },\n      {\n        type: 'get_button',\n      },\n      {\n        type: 'button_on_off',\n      },\n    ],\n  },\n  {\n    name: 'PCF9581 (ADC)',\n    colour: COLORS[PCF8591],\n    blocks: [\n      {\n        type: 'set_PCF8591',\n      },\n      {\n        type: 'get_PCF8591',\n      },\n      {\n        type: 'use_PCF8591',\n      },\n      ...PCF8591PinBlocks,\n    ],\n  },\n  {\n    name: 'Sensor',\n    colour: COLORS[SENSOR],\n    blocks: [\n      {\n        type: 'set_sensor',\n      },\n    ],\n  },\n  {\n    name: 'Lists',\n    colour: '#745ba5',\n    blocks: [\n      { type: 'lists_create_with' },\n      { type: 'lists_create_with' },\n      { type: 'lists_repeat' },\n      { type: 'lists_length' },\n      { type: 'lists_isEmpty' },\n      { type: 'lists_indexOf' },\n      { type: 'lists_getIndex' },\n      { type: 'lists_setIndex' },\n      { type: 'lists_getSublist' },\n      { type: 'lists_split' },\n      { type: 'lists_sort' },\n    ],\n  },\n];\n\nconsole.log({ toolboxCategories });\nexport default toolboxCategories;\n","import Blockly from 'blockly';\n\nimport prettier from 'prettier/standalone';\nimport parserBabel from 'prettier/parser-babel';\n\nconst workspaceDidChangeInner = (\n  workspace,\n  initializedRef,\n  workspaceRef,\n  xml,\n  handleToolboxChange\n) => {\n  // eslint-disable-next-line no-param-reassign\n  workspaceRef.current = workspace;\n  if (!initializedRef.current && workspace) {\n    console.group('initialization');\n    console.log('Initializing Workspace');\n    console.groupEnd();\n  }\n  // console.log({ workspace });\n  const newXml = Blockly.Xml.domToText(Blockly.Xml.workspaceToDom(workspace));\n  const code = Blockly.JavaScript.workspaceToCode(workspace);\n  const rearrangedCode = `\n      const { RaspiIO } = require('raspi-io');\n      const five = require(\"johnny-five\");\n      const board = new five.Board({\n        io: new RaspiIO()\n      });\n    \n      ${code}`.replaceAll('window.alert', 'console.log');\n\n  let prettierCode = rearrangedCode;\n\n  try {\n    prettierCode = prettier.format(rearrangedCode, {\n      parser: 'babel',\n      plugins: [parserBabel],\n    });\n  } catch (err) {\n    console.group('Prettier Error');\n    console.error(err);\n    console.groupEnd();\n  }\n  if (xml !== newXml || !initializedRef.current) {\n    console.group('xml changed');\n    console.log('setting state');\n    console.groupEnd();\n    handleToolboxChange({ code: prettierCode, xml: newXml });\n  }\n  // eslint-disable-next-line no-param-reassign\n  initializedRef.current = true;\n};\n\nexport default workspaceDidChangeInner;\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport ReactBlockly from 'react-blockly';\nimport Blockly from 'blockly';\nimport { LED, BUTTON, SENSOR, PCF8591 } from 'constants/blockConstants';\nimport GPIOPins, { getGPIOBlockName } from 'constants/GPIOPins';\nimport PCF8591Pins, { getPCF8591PinBlockName } from 'constants/PCF8591Pins';\n\nimport toolboxCategories from './toolboxCategories';\n\nimport workspaceDidChangeInner from './workspaceDidChangeInner';\n\nconst GPIOPinBlocksLimiters = GPIOPins.reduce((acc, option) => {\n  const [name] = option;\n  const key = getGPIOBlockName(name);\n  return {\n    ...acc,\n    [key]: 1,\n  };\n}, {});\n\nconst PCF8591PinBlocksLimiters = PCF8591Pins.reduce((acc, name) => {\n  const key = getPCF8591PinBlockName(name);\n\n  return {\n    ...acc,\n    [key]: 1,\n  };\n}, {});\n\nconst blockLimiters = {\n  ...GPIOPinBlocksLimiters,\n  ...PCF8591PinBlocksLimiters,\n};\n\nconst onImportXmlError = (e) => {\n  console.group('xml error');\n  console.error(e);\n  console.groupEnd();\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nconst BlocklyToolbox = ({ toolboxState, handleToolboxChange }) => {\n  console.group('BlocklyToolbox');\n  const { xml } = toolboxState;\n  console.log({ xml });\n\n  const workspaceRef = useRef();\n  const initializedRef = useRef(false);\n\n  console.log({ workspaceRef });\n\n  const createVariable = (type) => {\n    if (workspaceRef.current) {\n      Blockly.Variables.createVariableButtonHandler(\n        workspaceRef.current,\n        null,\n        type\n      );\n    }\n  };\n\n  const workspaceDidChange = (workspace) =>\n    workspaceDidChangeInner(\n      workspace,\n      initializedRef,\n      workspaceRef,\n      xml,\n      handleToolboxChange\n    );\n\n  const classes = useStyles();\n  console.groupEnd();\n\n  return (\n    <>\n      <div className={classes.root}>\n        <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          size=\"small\"\n          onClick={() => createVariable(LED)}\n        >\n          Create LED\n        </Button>\n        <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          size=\"small\"\n          onClick={() => createVariable(BUTTON)}\n        >\n          Create Button\n        </Button>\n\n        <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          size=\"small\"\n          onClick={() => createVariable(PCF8591)}\n        >\n          Create PCF8591\n        </Button>\n        <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          size=\"small\"\n          onClick={() => createVariable(SENSOR)}\n        >\n          Create Sensor\n        </Button>\n      </div>\n      <ReactBlockly\n        ref={workspaceRef}\n        toolboxCategories={toolboxCategories}\n        initialXml={xml}\n        wrapperDivClassName=\"fill-height\"\n        workspaceConfiguration={{\n          grid: {\n            spacing: 20,\n            length: 3,\n            colour: '#ccc',\n            snap: true,\n          },\n          maxInstances: blockLimiters,\n        }}\n        workspaceDidChange={workspaceDidChange}\n        onImportXmlError={onImportXmlError}\n        processToolboxCategory={(toolboxCategory) => {\n          console.group('processToolboxCategory');\n          console.log({ toolboxCategory });\n          console.groupEnd();\n          return toolboxCategory;\n        }}\n      />\n    </>\n  );\n};\n\nBlocklyToolbox.propTypes = {\n  toolboxState: PropTypes.shape({\n    xml: PropTypes.string,\n    code: PropTypes.string,\n  }).isRequired,\n  handleToolboxChange: PropTypes.func.isRequired,\n};\nexport default BlocklyToolbox;\n","import React from 'react';\nimport socketio from 'socket.io-client';\n\nconst ENDPOINT = `${window.location.hostname}:8080`;\nconst socket = socketio.connect(ENDPOINT, { reconnect: true });\nconst SocketContext = React.createContext();\n\nexport { socket, SocketContext };\n","import React, { useState, useEffect, useContext, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from '@material-ui/core/Button';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\nimport PanToolIcon from '@material-ui/icons/PanTool';\nimport PowerSettingsNewIcon from '@material-ui/icons/PowerSettingsNew';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Dialog from '@material-ui/core/Dialog';\nimport { SocketContext } from 'socket-config/socket';\n\nconst ConfirmationDialogRaw = (props) => {\n  const { onClose, open, ...other } = props;\n\n  const handleCancel = () => {\n    onClose(false);\n  };\n\n  const handleOk = () => {\n    onClose(true);\n  };\n\n  return (\n    <Dialog\n      disableBackdropClick\n      disableEscapeKeyDown\n      maxWidth=\"xs\"\n      aria-labelledby=\"confirmation-dialog-title\"\n      open={open}\n      {...other}\n    >\n      <DialogTitle id=\"confirmation-dialog-title\">Power Off?</DialogTitle>\n      <DialogContent dividers>\n        Are you sure you want to power off?\n      </DialogContent>\n      <DialogActions>\n        <Button autoFocus onClick={handleCancel} color=\"primary\">\n          No\n        </Button>\n        <Button onClick={handleOk} color=\"primary\">\n          yes\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nConfirmationDialogRaw.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n};\n\nconst GreenButton = withStyles((theme) => ({\n  root: {\n    color: theme.palette.getContrastText(theme.palette.success.main),\n    backgroundColor: theme.palette.success.main,\n    '&:hover': {\n      backgroundColor: theme.palette.success.dark,\n    },\n  },\n}))(Button);\n\nconst Terminal = ({ isProjectRunning, projectName, projectCode }) => {\n  console.group('Terminal');\n  const [response, setResponse] = useState('');\n  const [value, setValue] = useState('');\n  const messagesEndRef = useRef(null);\n  const [open, setOpen] = useState(false);\n\n  const socket = useContext(SocketContext);\n  console.log({ socket });\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  const handleClose = (newValue) => {\n    console.group('handleClose');\n    setOpen(false);\n\n    if (newValue) {\n      console.log('emitting powerOff');\n      socket.emit('powerOff');\n    }\n    console.groupEnd();\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [response]);\n\n  useEffect(() => {\n    socket.on('message', (data) => {\n      console.group('on message');\n      const buf = String.fromCharCode.apply(null, new Uint8Array(data));\n      console.log({ buf });\n      setResponse((prev) => `${prev}<p class=\"terminal\">${buf}</p>`);\n      console.groupEnd();\n    });\n    socket.on('exit', (data) => {\n      console.group('on exit');\n      console.log({ data });\n      console.groupEnd();\n      setResponse((prev) => `${prev}<p class=\"terminal\">${data}</p>`);\n    });\n  }, [socket]);\n\n  const handleSubmit = (event) => {\n    console.group('handleSubmit');\n    console.log({ value });\n    console.log('emitting');\n    socket.emit('message', value);\n\n    setValue('');\n    event.preventDefault();\n    console.groupEnd();\n  };\n\n  const handleRun = () => {\n    console.group('handleRun');\n    console.log('emitting');\n\n    socket.emit('copyProject', { projectCode });\n\n    setTimeout(() => {\n      const runProgramCmd =\n        'sudo node /home/pi/Development/johnny-five/index.js';\n\n      socket.emit('message', runProgramCmd);\n      socket.emit('projectStarted');\n    }, 1000);\n\n    console.groupEnd();\n  };\n\n  const handleStop = () => {\n    console.group('handleStop');\n    console.log('emitting');\n\n    const exitProgramCmd = `.exit`;\n    socket.emit('message', exitProgramCmd);\n    setTimeout(() => {\n      socket.emit('stopProject');\n    }, 500);\n\n    console.groupEnd();\n  };\n\n  const useStyles = makeStyles((theme) => ({\n    buttonBar: {\n      '& > *': {\n        margin: theme.spacing(1),\n      },\n      width: '100%',\n      position: 'fixed',\n    },\n    terminalContainer: {\n      paddingTop: '46px',\n    },\n    shutdown: {\n      float: 'right',\n    },\n  }));\n\n  const classes = useStyles();\n  console.groupEnd();\n\n  return (\n    <>\n      <div className={classes.buttonBar}>\n        <GreenButton\n          variant=\"contained\"\n          size=\"small\"\n          startIcon={<PlayCircleOutlineIcon />}\n          disabled={\n            isProjectRunning || projectName == null || projectCode === ''\n          }\n          onClick={handleRun}\n        >\n          Play\n        </GreenButton>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          size=\"small\"\n          startIcon={<PanToolIcon />}\n          disabled={!isProjectRunning}\n          onClick={handleStop}\n        >\n          Stop\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          size=\"small\"\n          className={classes.shutdown}\n          startIcon={<PowerSettingsNewIcon />}\n          disabled={isProjectRunning}\n          onClick={() => setOpen(true)}\n        >\n          Turn off\n        </Button>\n        <ConfirmationDialogRaw\n          id=\"power-off-dialog\"\n          keepMounted\n          open={open}\n          onClose={handleClose}\n        />\n      </div>\n      <div className={`terminal ${classes.terminalContainer}`}>\n        <div>\n          {/* eslint-disable react/self-closing-comp, react/no-danger */}\n          <div\n            className=\"terminal\"\n            dangerouslySetInnerHTML={{ __html: response }}\n          ></div>\n          {/* eslint-enable */}\n          <div ref={messagesEndRef} />\n        </div>\n        <form className=\"terminal\" onSubmit={handleSubmit}>\n          &gt;{' '}\n          <input\n            className=\"terminal\"\n            value={value}\n            onChange={(event) => setValue(event.target.value)}\n          />\n        </form>\n      </div>\n    </>\n  );\n};\n\nTerminal.propTypes = {\n  isProjectRunning: PropTypes.bool.isRequired,\n  projectName: PropTypes.string,\n  projectCode: PropTypes.string,\n};\n\nexport default Terminal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nconst ConfirmDeleteDialog = (props) => {\n  const { onClose, open, file, ...other } = props;\n\n  const handleCancel = () => {\n    onClose(false);\n  };\n\n  const handleOk = () => {\n    onClose(true);\n  };\n\n  return (\n    <Dialog\n      disableBackdropClick\n      disableEscapeKeyDown\n      maxWidth=\"xs\"\n      aria-labelledby=\"confirmation-dialog-title\"\n      open={open}\n      {...other}\n    >\n      <DialogTitle id=\"confirmation-dialog-title\">Delete File?</DialogTitle>\n      <DialogContent dividers>\n        Are you sure you want to delete {file}?\n      </DialogContent>\n      <DialogActions>\n        <Button autoFocus onClick={handleCancel} color=\"primary\">\n          Cancel\n        </Button>\n        <Button onClick={handleOk} color=\"secondary\">\n          Delete\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nConfirmDeleteDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  file: PropTypes.string.isRequired,\n};\n\nexport default ConfirmDeleteDialog;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nconst CopyDialog = (props) => {\n  const { onClose, open, ...other } = props;\n\n  const [newFileName, setNewFileName] = useState('');\n\n  const handleCancel = () => {\n    onClose(false, newFileName);\n    setNewFileName('');\n  };\n\n  const handleOk = () => {\n    onClose(true, newFileName);\n    setNewFileName('');\n  };\n\n  const handleChange = (event) => {\n    setNewFileName(event.target.value);\n  };\n\n  return (\n    <Dialog\n      disableBackdropClick\n      disableEscapeKeyDown\n      maxWidth=\"xs\"\n      aria-labelledby=\"confirmation-dialog-title\"\n      open={open}\n      {...other}\n    >\n      <DialogTitle id=\"confirmation-dialog-title\">Delete File?</DialogTitle>\n      <DialogContent dividers>\n        <DialogContentText>\n          Enter the new project name to copy to\n        </DialogContentText>\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          id=\"name\"\n          label=\"New Project Name\"\n          type=\"string\"\n          value={newFileName}\n          onChange={handleChange}\n          fullWidth\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button autoFocus onClick={handleCancel} color=\"primary\">\n          Cancel\n        </Button>\n        <Button\n          onClick={handleOk}\n          color=\"secondary\"\n          disabled={newFileName === ''}\n        >\n          Copy\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nCopyDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n};\n\nexport default CopyDialog;\n","import React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nimport ListItem from '@material-ui/core/ListItem';\nimport Avatar from '@material-ui/core/Avatar';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\n\nimport ConfirmDeleteDialog from './ConfirmDeleteDialog';\nimport CopyDialog from './CopyDialog';\n\nconst ProjectListItem = ({\n  selectedIndex,\n  file,\n  index,\n  handleListItemClick,\n  handleDelete,\n  handleCopy,\n}) => {\n  console.group('ProjectListItem');\n  const [isConfirmDeleteDialogOpen, setIsConfirmDeleteDialogOpen] = useState(\n    false\n  );\n  const [isCopyDialogOpen, setIsCopyDialogOpen] = useState(false);\n\n  const handleConfirmDeleteDialogClose = useCallback(\n    (isConfirmed) => {\n      console.group('handleConfirmDeleteDialogClose');\n      setIsConfirmDeleteDialogOpen(false);\n\n      if (isConfirmed) {\n        handleDelete(file);\n      }\n      console.groupEnd();\n    },\n    [file, handleDelete]\n  );\n\n  const handleCopyDialogClose = useCallback(\n    (isConfirmed, newFileName) => {\n      console.group('handleCopyDialogClose');\n      setIsCopyDialogOpen(false);\n\n      if (isConfirmed) {\n        handleCopy(file, `${newFileName}.xml`);\n      }\n      console.groupEnd();\n    },\n    [file, handleCopy]\n  );\n\n  console.groupEnd();\n  return (\n    <>\n      <ListItem\n        button\n        selected={selectedIndex === index}\n        onClick={(event) => handleListItemClick(event, file)}\n      >\n        <ListItemAvatar>\n          <Avatar>\n            <DescriptionIcon />\n          </Avatar>\n        </ListItemAvatar>\n        <ListItemText primary={file} />\n        <ListItemSecondaryAction>\n          <IconButton\n            edge=\"end\"\n            aria-label=\"delete\"\n            onClick={() => setIsConfirmDeleteDialogOpen(true)}\n          >\n            <DeleteIcon />\n          </IconButton>\n          <IconButton\n            edge=\"end\"\n            aria-label=\"copy\"\n            onClick={() => setIsCopyDialogOpen(true)}\n          >\n            <FileCopyIcon />\n          </IconButton>\n        </ListItemSecondaryAction>\n      </ListItem>\n      <ConfirmDeleteDialog\n        keepMounted\n        open={isConfirmDeleteDialogOpen}\n        file={file}\n        onClose={handleConfirmDeleteDialogClose}\n      />\n      <CopyDialog\n        keepMounted\n        open={isCopyDialogOpen}\n        onClose={handleCopyDialogClose}\n      />\n    </>\n  );\n};\n\nProjectListItem.propTypes = {\n  selectedIndex: PropTypes.number,\n  file: PropTypes.string.isRequired,\n  handleListItemClick: PropTypes.func.isRequired,\n  index: PropTypes.number.isRequired,\n  handleDelete: PropTypes.func.isRequired,\n  handleCopy: PropTypes.func.isRequired,\n};\n\nexport default ProjectListItem;\n","import React, { useState, useEffect, useContext, useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport { SocketContext } from 'socket-config/socket';\n\nimport ProjectListItem from './ProjectListItem';\n\nconst useStyles = makeStyles((theme) => ({\n  listRoot: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n  },\n  root: {\n    flexGrow: 1,\n    margin: theme.spacing(1),\n  },\n  formRoot: {\n    '& > *': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  },\n}));\n\nconst ProjectManager = ({ handleProjectNameSelection }) => {\n  console.group('ProjectManager');\n  const socket = useContext(SocketContext);\n  const [files, setFiles] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  // TODO jte check create doesn't exist\n  const handleDelete = useCallback(\n    (fileName) => {\n      console.group('handleDelete');\n\n      console.log('emitting deleteFile');\n      socket.emit('deleteFile', { fileName });\n\n      console.groupEnd();\n    },\n    [socket]\n  );\n\n  const handleCopy = useCallback(\n    (fileName, newFileName) => {\n      console.group('handleCopy');\n\n      console.log('emitting handleCopy');\n      socket.emit('copyFile', { fileName, newFileName });\n\n      console.groupEnd();\n    },\n    [socket]\n  );\n  const classes = useStyles();\n  const [selectedIndex, setSelectedIndex] = React.useState(null);\n\n  const handleListItemClick = useCallback(\n    (event, file) => {\n      console.group('handleListItemClick');\n      console.log({ file });\n      console.groupEnd();\n      handleProjectNameSelection(file);\n      setSelectedIndex(null);\n    },\n    [handleProjectNameSelection]\n  );\n\n  const handleInputChange = useCallback((event) => {\n    setInputValue(event.target.value);\n  }, []);\n\n  useEffect(() => {\n    console.log('emit getFiles');\n    socket.emit('getFiles');\n\n    socket.on('files', (data) => {\n      console.group('on files');\n      console.log({ data });\n      console.groupEnd();\n      setFiles(data);\n    });\n  }, [socket]);\n\n  let fileList = null;\n  if (files !== null) {\n    fileList = files.map((file, index) => (\n      <ProjectListItem\n        key={file}\n        file={file}\n        index={index}\n        selectedIndex={selectedIndex}\n        handleDelete={handleDelete}\n        handleCopy={handleCopy}\n        handleListItemClick={handleListItemClick}\n      />\n    ));\n  }\n  console.groupEnd();\n\n  return (\n    <>\n      <div className={classes.root}>\n        <Grid container spacing={3}>\n          <Grid item xs={6}>\n            <div className={classes.listRoot}>\n              {fileList === null ? (\n                <CircularProgress />\n              ) : (\n                <List\n                  component=\"nav\"\n                  aria-label=\"project files\"\n                  subheader={\n                    <ListSubheader component=\"div\" id=\"nested-list-subheader\">\n                      Saved Projects\n                    </ListSubheader>\n                  }\n                >\n                  {fileList}\n                </List>\n              )}\n            </div>\n          </Grid>\n          <Grid item xs={6}>\n            <form className={classes.formRoot} noValidate autoComplete=\"off\">\n              <TextField\n                id=\"standard-basic\"\n                label=\"New Project Name\"\n                value={inputValue}\n                onChange={handleInputChange}\n              />\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                disabled={inputValue.trim().length === 0 || fileList === null}\n                onClick={() => {\n                  const projectName = `${inputValue.trim()}.xml`;\n                  handleProjectNameSelection(projectName);\n                  setInputValue('');\n                }}\n              >\n                Create New Project\n              </Button>\n            </form>\n          </Grid>\n        </Grid>\n      </div>\n    </>\n  );\n};\n\nProjectManager.propTypes = {\n  handleProjectNameSelection: PropTypes.func.isRequired,\n};\n\nexport default ProjectManager;\n","/* eslint-disable import/newline-after-import, import/first, import/order */\nimport './App.css';\nimport './customBlocks/custom_Blocks';\nimport './customBlocks/required/board_setup_blocks';\nimport './customBlocks/led/led';\nimport './customBlocks/button/button';\nimport './customBlocks/GPIOpins/pins';\nimport './customBlocks/virtualBoards/PCF8591';\nimport './customBlocks/sensor/sensor';\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport BlocklyToolbox from 'features/blockly-toolbox/BlocklyToolbox';\nimport Terminal from './Terminal';\nimport ProjectManager from 'features/project-manager/ProjectManager';\n\nimport { SocketContext, socket } from 'socket-config/socket';\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {children}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nconst initialXml =\n  '<xml xmlns=\"https://developers.google.com/blockly/xml\"><block type=\"board_setup\" id=\"{`$}^q8GM8vjCjK?)f5u\" x=\"90\" y=\"30\"></block></xml>';\n\nconst App = () => {\n  console.group('App');\n  const [toolboxState, setToolboxState] = useState({\n    code: '',\n    xml: initialXml,\n  });\n  const [tabValue, setTabValue] = useState(0);\n  const [projectName, setProjectName] = useState(null);\n\n  const [isProjectRunning, setIsProjectRunning] = useState(false);\n\n  const handleTabChange = (event, newValue) => {\n    setTabValue(newValue);\n  };\n\n  const handleProjectNameSelection = useCallback((projectNameToUpdate) => {\n    setProjectName(projectNameToUpdate);\n  }, []);\n\n  const handleToolboxChange = useCallback(\n    ({ xml, code }) => {\n      setToolboxState({ xml, code });\n      if (projectName !== null) {\n        console.group('handleToolboxChange');\n        console.log({ xml, projectName });\n        console.groupEnd();\n        socket.emit('saveFile', { contents: xml, fileName: projectName });\n      }\n    },\n    [projectName]\n  );\n\n  useEffect(() => {\n    if (projectName !== null) {\n      console.group('getFile Effect');\n      console.log({ projectName });\n      console.groupEnd();\n      socket.emit('getFile', { fileName: projectName });\n    }\n  }, [projectName]);\n\n  useEffect(() => {\n    socket.on('connect', () => {\n      console.log('Client has connected to the server!');\n    });\n\n    socket.on('file', (file) => {\n      console.group('on file');\n      if (file === '') {\n        console.log('blank file');\n        setToolboxState({ code: '', xml: initialXml });\n      } else {\n        const buf = String.fromCharCode.apply(null, new Uint8Array(file));\n        console.log({ buf });\n        setToolboxState({ code: '', xml: buf });\n      }\n      setTabValue(1);\n      console.groupEnd();\n    });\n\n    socket.on('projectStatus', (status) => {\n      console.group('on projectStatus');\n      console.log({ status });\n      setIsProjectRunning(status);\n      console.groupEnd();\n    });\n  }, []);\n\n  console.groupEnd();\n  return (\n    <SocketContext.Provider value={socket}>\n      <AppBar position=\"static\">\n        <Tabs\n          value={tabValue}\n          onChange={handleTabChange}\n          aria-label=\"Blockly Tabs\"\n        >\n          <Tab label=\"Projects\" disabled={isProjectRunning} />\n          <Tab\n            label=\"Blockly\"\n            disabled={projectName === null || isProjectRunning}\n          />\n          <Tab\n            label=\"Code\"\n            disabled={projectName === null || isProjectRunning}\n          />\n          <Tab\n            label=\"XML\"\n            disabled={projectName === null || isProjectRunning}\n          />\n          <Tab label=\"Run\" />\n        </Tabs>\n      </AppBar>\n      <TabPanel value={tabValue} index={0}>\n        <ProjectManager\n          handleProjectNameSelection={handleProjectNameSelection}\n        />\n      </TabPanel>\n      <TabPanel value={tabValue} index={1}>\n        {tabValue === 1 && (\n          <BlocklyToolbox\n            toolboxState={toolboxState}\n            handleToolboxChange={handleToolboxChange}\n          />\n        )}\n      </TabPanel>\n      <TabPanel value={tabValue} index={2}>\n        <pre>{toolboxState.code}</pre>\n      </TabPanel>\n      <TabPanel value={tabValue} index={3}>\n        <pre id=\"generated-xml\">{toolboxState.xml}</pre>\n      </TabPanel>\n      <TabPanel value={tabValue} index={4}>\n        <Terminal\n          isProjectRunning={isProjectRunning}\n          projectCode={toolboxState.code}\n          projectName={projectName}\n        />\n      </TabPanel>\n    </SocketContext.Provider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}