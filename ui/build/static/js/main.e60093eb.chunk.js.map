{"version":3,"sources":["customBlocks/custom_Blocks.js","customBlocks/required/board_setup_blocks.js","constants/blockConstants.js","helpers/isNullOrEmpty.js","helpers/pinInputGenerators.js","customBlocks/led/led.js","helpers/createGetBlockTypeName.js","helpers/getBlockTypeMap.js","customBlocks/button/constants.js","customBlocks/button/button.js","constants/GPIOPins.js","customBlocks/GPIOpins/pins.js","constants/PCF8591Pins.js","customBlocks/virtualBoards/virtualBoardGenerators.js","customBlocks/virtualBoards/PCF8591.js","customBlocks/sensor/constants.js","customBlocks/sensor/setSensor.js","customBlocks/sensor/onChangeSensor.js","customBlocks/sensor/createGetSensorGenerators.js","customBlocks/sensor/getSensor.js","customBlocks/piezo/constants.js","customBlocks/piezo/piezo.js","features/blockly-toolbox/toolboxCategories.js","features/blockly-toolbox/workspaceDidChangeInner.js","features/blockly-toolbox/BlocklyToolbox.js","socket-config/socket.js","Terminal.js","features/project-manager/ConfirmDeleteDialog.js","features/project-manager/CopyDialog.js","features/project-manager/ProjectListItem.js","features/project-manager/ProjectManager.js","helpers/createLogHelper.js","App.js","index.js"],"names":["Blockly","Blocks","init","this","appendDummyInput","appendField","FieldTextInput","appendStatementInput","setCheck","setInputsInline","setColour","setTooltip","setHelpUrl","JavaScript","block","getFieldValue","statementToCode","appendValueInput","setPreviousStatement","valueToCode","Javascript","ORDER_ATOMIC","statementsMain","LED","BUTTON","PIN","PCF8591","SENSOR","PIEZO","COLORS","isNullOrEmpty","input","undefined","createGenerators","inputType","color","setGenerator","useText","variableName","FieldVariable","setNextStatement","getGenerator","setOutput","commandGenerator","dropDownArray","validatorFunctionName","validatorFunc","tmpValidatorFunc","FieldDropdown","code","constructorName","blockIn","pinValue","codeVariableName","variableDB_","getName","Variables","NAME_TYPE","command","isAdditionaParamInput","fieldValue","additionalParamCommands","i","length","obj","blink","dropDownItem","beforeText","afterText","createFieldBlock","FieldNumber","fieldName","codeGenerator","inputBlock","variableCodeName","arg","additionalParamsArray","Object","keys","reduce","acc","key","mutationToDom","container","document","createElement","setAttribute","domToMutation","xmlElement","additionalParam","getAttribute","updateShape_","validate","newValue","getSourceBlock","hasAdditionalParam","inputExists","getInput","additionalParamMeta","removeInput","createGetBlockTypeName","name","getBlockTypeMap","blockTypes","cur","keyA","keyB","replace","getBlockTypeName","BUTTON_BLOCK_TYPES","BLOCKS_MAP","STATEMENT_NAME","BUTTON_COMMAND","buttonCommand","GPIOPins","getGPIOBlockName","prev","curr","replaceAll","forEach","option","value","blockName","getPCF8591PinBlockName","pinName","PCF8591Pins","useGenerator","pinType","expanderName","SENSOR_BLOCK_TYPES","SENSOR_BLOCKS_MAP","thresholdFieldName","frequencyFieldName","CUSTOM_OPTIONS_OPTION","sensorOptions","CUSTOM_GPIO_OPTION","customGPIOOptions","customOptionsXmlAttributeName","customGPIOXmlAttributeName","CUSTOM_OPTIONS_DUMMY_INPUT","PIN_INPUT","getCustomOptionsFieldName","inputTypeIn","getCustomGPIOFieldName","getHasCustomOptions","getHasCustomGPIO","set","validateCustomOptions","customOptionsFieldValue","customGPIOFieldValue","customOptionsXmlAttribute","customGPIOXmlAttribute","updateShapeCustomOptionShape_","updateShapeGPIOShape_","validateGPIO","hasCustomOptions","customOptionsDummyInputExists","e","console","log","hasCustomGPIO","customGPIODummyInputExists","setAlign","ALIGN_RIGHT","thresholdValue","frequencyValue","args","threshold","freq","pin","argsVariableName","JSON","stringify","SENSOR_EVENT_INPUT","SENSOR_ON_STATEMENT","sensorEvent","sensorVariableNameFieldValue","getFirstSurroundedAncestorByType","surroundAncestorType","surroundParent","getSurroundParent","group","type","groupEnd","defaultAdditionalInit","ref","defaultCodeWrapper","createGetSensorGenerators","ancestorBlockType","get","propertyName","fields","codeWrapper","EMPTY_RESULT","surroundAncestor","fieldValues","push","sensorVariableName","updatedPropertyName","join","result","fieldText","additionalInitFunc","that","createField","text","field","setOnChange","_onChange","event","wrongEvent","Events","BLOCK_MOVE","isMovingStarting","newParentId","oldParentId","doSkipOnChange","hasSensorSurround","initialSurroundParent","isEnabled","setEnabled","alert","scaleFields","floatingScaleFields","booleanAtFields","codeIn","PIEZO_BLOCK_TYPES","piezeNotesMapOrig","c0","d0","e0","f0","g0","a0","b0","c1","d1","e1","f1","g1","a1","b1","c2","d2","e2","f2","g2","a2","b2","c3","d3","e3","f3","g3","a3","b3","c4","d4","e4","f4","g4","a4","b4","c5","d5","e5","f5","g5","a5","b5","c6","d6","e6","f6","g6","a6","b6","c7","d7","e7","f7","g7","a7","b7","c8","d8","e8","f8","g8","a8","b8","piezeNotesMap","TEMPO_FIELD","NOTE_OPTIONS","map","NOTE_FIELD","NOTE_LENGTH_FIELD","FREQUENCY_FIELD","DURATION_IN_MS_FIELD","piezoTempo","variableFieldValue","Infinity","piezoNote","piezoNoteLength","durationValue","blockTypeMapper","blockType","SENSOR_BLOCKS","PIEZO_BLOCKS","BUTTON_BLOCKS","GPIOpinBlocks","PCF8591PinBlocks","toolboxCategories","colour","blocks","custom","workspaceDidChangeInner","workspace","initializedRef","workspaceRef","xml","handleToolboxChange","current","newXml","Xml","domToText","workspaceToDom","workspaceToCode","rearrangedCode","prettierCode","prettier","format","parser","plugins","parserBabel","err","error","GPIOPinBlocksLimiters","PCF8591PinBlocksLimiters","blockLimiters","onImportXmlError","useStyles","makeStyles","theme","root","margin","spacing","BlocklyToolbox","toolboxState","useRef","createVariable","createVariableButtonHandler","classes","className","Button","variant","size","onClick","initialXml","wrapperDivClassName","workspaceConfiguration","grid","snap","maxInstances","workspaceDidChange","processToolboxCategory","toolboxCategory","ENDPOINT","window","location","hostname","socket","socketio","connect","reconnect","SocketContext","React","createContext","ConfirmationDialogRaw","props","onClose","open","other","Dialog","disableBackdropClick","disableEscapeKeyDown","maxWidth","aria-labelledby","DialogTitle","id","DialogContent","dividers","DialogActions","autoFocus","GreenButton","withStyles","palette","getContrastText","success","main","backgroundColor","dark","Terminal","isProjectRunning","projectName","projectCode","useState","response","setResponse","setValue","messagesEndRef","setOpen","useContext","useEffect","scrollIntoView","behavior","scrollToBottom","on","data","buf","String","fromCharCode","apply","Uint8Array","buttonBar","width","position","terminalContainer","paddingTop","shutdown","float","startIcon","disabled","emit","setTimeout","keepMounted","dangerouslySetInnerHTML","__html","onSubmit","preventDefault","onChange","target","ConfirmDeleteDialog","file","CopyDialog","newFileName","setNewFileName","DialogContentText","TextField","label","fullWidth","ProjectListItem","selectedIndex","index","handleListItemClick","handleDelete","handleCopy","isConfirmDeleteDialogOpen","setIsConfirmDeleteDialogOpen","isCopyDialogOpen","setIsCopyDialogOpen","handleConfirmDeleteDialogClose","useCallback","isConfirmed","handleCopyDialogClose","ListItem","button","selected","ListItemAvatar","Avatar","ListItemText","primary","ListItemSecondaryAction","IconButton","edge","aria-label","listRoot","background","paper","marginLeft","marginRight","flexGrow","formRoot","ProjectManager","handleProjectNameSelection","files","setFiles","inputValue","setInputValue","fileName","setSelectedIndex","handleInputChange","fileList","Grid","item","xs","CircularProgress","List","component","subheader","ListSubheader","noValidate","autoComplete","trim","getLastItem","queue","TabPanel","children","role","hidden","mutedGroups","groupFunc","includes","groupEndFunc","pop","logFunc","lastItem","createLogHelper","App","setToolboxState","tabValue","setTabValue","setProjectName","setIsProjectRunning","projectNameToUpdate","contents","status","Provider","AppBar","Tabs","Tab","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e60093eb.chunk.js","sourcesContent":["/* eslint-disable prefer-template */\n/* eslint-disable camelcase */\n/* eslint-disable object-shorthand */\n/* eslint-disable func-names */\n/* eslint-disable dot-notation */\nimport Blockly from 'blockly';\nimport 'blockly/javascript';\n\nBlockly.Blocks['new_boundary_function'] = {\n  init: function () {\n    this.appendDummyInput().appendField(\n      new Blockly.FieldTextInput('Boundary Function Name'),\n      'Name'\n    );\n    this.appendStatementInput('Content').setCheck(null);\n    this.setInputsInline(true);\n    this.setColour(315);\n    this.setTooltip('');\n    this.setHelpUrl('');\n  },\n};\n\nBlockly.JavaScript['new_boundary_function'] = function (block) {\n  const text_name = block.getFieldValue('Name');\n  const statements_content = Blockly.JavaScript.statementToCode(\n    block,\n    'Content'\n  );\n  const code =\n    'def ' + text_name + '(_object,**kwargs):\\n' + statements_content + '\\n';\n  return code;\n};\n\nBlockly.Blocks['return'] = {\n  init: function () {\n    this.appendValueInput('NAME').setCheck(null).appendField('return');\n    this.setInputsInline(false);\n    this.setPreviousStatement(true, null);\n    this.setColour(330);\n    this.setTooltip('');\n    this.setHelpUrl('');\n  },\n};\n\nBlockly.JavaScript['return'] = function (block) {\n  const value_name = Blockly.JavaScript.valueToCode(\n    block,\n    'NAME',\n    Blockly.Javascript.ORDER_ATOMIC\n  );\n  const code = 'return ' + value_name + '\\n';\n  return code;\n};\n","/* eslint-disable object-shorthand */\n/* eslint-disable func-names */\n/* eslint-disable dot-notation */\nimport Blockly from 'blockly';\nimport 'blockly/javascript';\n\nBlockly.Blocks['board_setup'] = {\n  init: function () {\n    this.appendDummyInput().appendField('Start');\n    this.setHelpUrl('');\n    this.setColour(50);\n    this.appendStatementInput('MAIN').setCheck(null);\n  },\n};\n\nBlockly.JavaScript['board_setup'] = function (block) {\n  const statementsMain = Blockly.JavaScript.statementToCode(block, 'MAIN');\n  const code = `\n  board.on(\"ready\", () => {\n    ${statementsMain}\n  });\n  `;\n  return code;\n};\n","export const LED = 'LED';\nexport const BUTTON = 'BUTTON';\nexport const PIN = 'PIN';\nexport const PCF8591 = 'PCF8591';\nexport const PIN_PCF8591 = 'PIN_PCF8591';\nexport const SENSOR = 'SENSOR';\nexport const PIEZO = 'PIEZO';\n\nexport const COLORS = {\n  [LED]: '#6CB0F2',\n  [BUTTON]: '#6549DA',\n  [PIN]: '#9CDEF6',\n  [PCF8591]: '#FCA481',\n  [SENSOR]: '#A392E9',\n  [PIEZO]: '#749DC4',\n};\n","const isNullOrEmpty = (input) =>\n  input === null || input === undefined || input === '';\n\nexport default isNullOrEmpty;\n","/* eslint-disable no-underscore-dangle */\n/* eslint-disable func-names */\n/* eslint-disable arrow-body-style */\nimport Blockly from 'blockly';\nimport 'blockly/javascript';\n\nimport { PIN } from 'constants/blockConstants';\n\nimport isNullOrEmpty from './isNullOrEmpty';\n\nconst createGenerators = ({ inputType, color = 230 }) => {\n  const pinInputBlockSetGenerator = ({ useText, variableName }) => {\n    return function () {\n      this.appendDummyInput().appendField('Make Pin');\n      this.appendValueInput(PIN).setCheck(PIN);\n      this.appendDummyInput().appendField(useText);\n      this.appendDummyInput(inputType).appendField(\n        new Blockly.FieldVariable(variableName, null, [inputType], inputType),\n        inputType\n      );\n      this.setInputsInline(true);\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(color);\n      this.setTooltip('');\n      this.setHelpUrl('');\n    };\n  };\n\n  const pinInputCodeSetGenerator = ({ constructorName }) => {\n    return function (blockIn) {\n      const pinValue = Blockly.JavaScript.valueToCode(\n        blockIn,\n        PIN,\n        Blockly.JavaScript.ORDER_ATOMIC\n      );\n      const codeVariableName = Blockly.JavaScript.variableDB_.getName(\n        blockIn.getFieldValue(inputType),\n        Blockly.Variables.NAME_TYPE\n      );\n\n      if (isNullOrEmpty(pinValue) || isNullOrEmpty(codeVariableName)) {\n        return '';\n      }\n      const codeOut = `${codeVariableName} = new ${constructorName}(${pinValue});\\n`;\n      return codeOut;\n    };\n  };\n\n  const pinInputBlockGetGenerator = ({ variableName }) => {\n    return function () {\n      this.appendDummyInput().appendField(\n        new Blockly.FieldVariable(variableName, null, [inputType], inputType),\n        inputType\n      );\n      this.setOutput(true, inputType);\n      this.setColour(color);\n    };\n  };\n\n  const pinInputCodeGetGenerator = () => {\n    return function (block) {\n      const variableName = Blockly.JavaScript.variableDB_.getName(\n        block.getFieldValue(inputType),\n        Blockly.Variables.NAME_TYPE\n      );\n      const code = variableName;\n      return [code, Blockly.JavaScript.ORDER_ATOMIC];\n    };\n  };\n\n  const pinInputBlockCommandGenerator = ({\n    dropDownArray,\n    variableName,\n    validatorFunctionName = null,\n  }) => {\n    return function () {\n      let validatorFunc = null;\n      if (validatorFunctionName != null) {\n        const tmpValidatorFunc = this[validatorFunctionName];\n        if (tmpValidatorFunc) {\n          validatorFunc = tmpValidatorFunc;\n        }\n      }\n      // this.appendValueInput(inputType).setCheck(inputType).appendField('Make');\n      this.appendDummyInput().appendField('Make');\n      this.appendDummyInput(inputType).appendField(\n        new Blockly.FieldVariable(variableName, null, [inputType], inputType),\n        inputType\n      );\n\n      this.appendDummyInput().appendField(\n        new Blockly.FieldDropdown(dropDownArray, validatorFunc),\n        `${inputType}_COMMAND`\n      );\n      this.setInputsInline(true);\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(color);\n      this.setTooltip('');\n      this.setHelpUrl('');\n    };\n  };\n\n  const pinInputCodeCommandGenerator = () => {\n    return function (block) {\n      const variableName = Blockly.JavaScript.variableDB_.getName(\n        block.getFieldValue(inputType),\n        Blockly.Variables.NAME_TYPE\n      );\n      if (isNullOrEmpty(variableName)) {\n        return '';\n      }\n      const command = block.getFieldValue(`${inputType}_COMMAND`);\n      const code = `${variableName}${command};\\n`;\n      return code;\n    };\n  };\n\n  return {\n    block: {\n      setGenerator: pinInputBlockSetGenerator,\n      getGenerator: pinInputBlockGetGenerator,\n      commandGenerator: pinInputBlockCommandGenerator,\n    },\n    code: {\n      setGenerator: pinInputCodeSetGenerator,\n      getGenerator: pinInputCodeGetGenerator,\n      commandGenerator: pinInputCodeCommandGenerator,\n    },\n  };\n};\n\nexport default createGenerators;\n","/* eslint-disable object-shorthand */\n/* eslint-disable no-underscore-dangle */\n/* eslint-disable func-names */\n/* eslint-disable dot-notation */\nimport Blockly from 'blockly';\nimport 'blockly/javascript';\nimport { LED, COLORS } from 'constants/blockConstants';\n\nimport createGenerators from 'helpers/pinInputGenerators';\nimport isNullOrEmpty from 'helpers/isNullOrEmpty';\n\nconst inputType = LED;\nconst color = COLORS[LED];\n\nconst isAdditionaParamInput = (fieldValue, additionalParamCommands) => {\n  // eslint-disable-next-line no-plusplus\n  for (let i = 0; i < additionalParamCommands.length; i++) {\n    if (fieldValue === additionalParamCommands[i][1]) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst getAdditionParamsArray = (obj) => {\n  const additionalParamsArray = Object.keys(obj).reduce(\n    (acc, key) => [...acc, [obj[key].dropDownItem, key]],\n    []\n  );\n  return additionalParamsArray;\n};\n\nconst { code, block } = createGenerators({ inputType, color });\n\nconst variableName = 'LED Name';\nBlockly.Blocks['set_led'] = {\n  init: block.setGenerator({\n    useText: 'be used for LED named',\n    variableName,\n  }),\n};\n\nBlockly.JavaScript['set_led'] = code.setGenerator({\n  constructorName: 'five.Led',\n});\n\nBlockly.Blocks['get_led'] = {\n  init: block.getGenerator({ variableName }),\n};\n\nBlockly.JavaScript['get_led'] = code.getGenerator();\n\nconst standardCommands = [\n  ['Turn On', '.on()'],\n  ['Turn Off', '.off()'],\n  ['Start Pulsing', '.pulse()'],\n  ['Stop Pulsing', '.stop()'],\n  ['Fade In', '.fadeIn()'],\n  ['Fade Out', '.fadeOut()'],\n];\n\nconst additionalParamCommands = {\n  blink: {\n    dropDownItem: 'Blink',\n    beforeText: 'every',\n    afterText: 'milliseconds',\n    createFieldBlock: () => new Blockly.FieldNumber(500, 0),\n    fieldName: 'BLINK_TIME_IN_MS',\n    codeGenerator: function (blockIn) {\n      const inputBlock = Blockly.JavaScript.valueToCode(\n        blockIn,\n        'LED',\n        Blockly.JavaScript.ORDER_ATOMIC\n      );\n      if (isNullOrEmpty(inputBlock)) {\n        return '';\n      }\n      const variableCodeName = Blockly.JavaScript.variableDB_.getName(\n        inputBlock,\n        Blockly.Variables.NAME_TYPE\n      );\n      const command = blockIn.getFieldValue('LED_COMMAND');\n      const arg = blockIn.getFieldValue('BLINK_TIME_IN_MS');\n      const codeOut = `${variableCodeName}.${command}(${arg});\\n`;\n      return codeOut;\n    },\n  },\n};\n\nconst additionalParamsArray = getAdditionParamsArray(additionalParamCommands);\n\nBlockly.Blocks['led_on_off'] = {\n  init: block.commandGenerator({\n    dropDownArray: [...standardCommands, ...additionalParamsArray],\n    validatorFunctionName: 'validate',\n    variableName,\n  }),\n  mutationToDom: function () {\n    const container = document.createElement('mutation');\n    const fieldValue = this.getFieldValue('LED_COMMAND');\n\n    const hasAdditionalParam = isAdditionaParamInput(\n      fieldValue,\n      additionalParamsArray\n    );\n\n    if (hasAdditionalParam) {\n      container.setAttribute('additionalParam', fieldValue);\n    } else {\n      container.setAttribute('additionalParam', '');\n    }\n    return container;\n  },\n  domToMutation: function (xmlElement) {\n    const additionalParam = xmlElement.getAttribute('additionalParam');\n    this.updateShape_(additionalParam);\n  },\n\n  validate: function (newValue) {\n    this.getSourceBlock().updateShape_(newValue);\n    return newValue;\n  },\n  updateShape_: function (additionalParam) {\n    const hasAdditionalParam = isAdditionaParamInput(\n      additionalParam,\n      additionalParamsArray\n    );\n    const inputExists = this.getInput('ADDITIONAL_PARAM');\n    if (hasAdditionalParam) {\n      if (!inputExists) {\n        const additionalParamMeta = additionalParamCommands[additionalParam];\n        const {\n          beforeText,\n          createFieldBlock,\n          fieldName,\n          afterText,\n        } = additionalParamMeta;\n        this.appendDummyInput('ADDITIONAL_PARAM')\n          .appendField(beforeText)\n          .appendField(createFieldBlock(), fieldName)\n          .appendField(afterText);\n      }\n    } else if (inputExists) {\n      this.removeInput('ADDITIONAL_PARAM');\n    }\n  },\n};\n\nBlockly.JavaScript['led_on_off'] = function (blockIn) {\n  const fieldValue = blockIn.getFieldValue('LED_COMMAND');\n\n  const hasAdditionalParam = isAdditionaParamInput(\n    fieldValue,\n    additionalParamsArray\n  );\n  if (hasAdditionalParam) {\n    return additionalParamCommands[fieldValue].codeGenerator(blockIn);\n  }\n  return code.commandGenerator()(blockIn);\n};\n","const createGetBlockTypeName = (inputType) => {\n  const getBlockTypeName = (name) => {\n    return `${inputType}_${name}`;\n  };\n  return getBlockTypeName;\n};\n\nexport default createGetBlockTypeName;\n","const getBlockTypeMap = (blockTypes) => {\n  const result = blockTypes.reduce((acc, cur) => {\n    const keyA = cur;\n    const keyB = cur.replace(/.*?_/, '');\n    return {\n      ...acc,\n      [keyA]: cur,\n      [keyB]: cur,\n    };\n  }, {});\n\n  return result;\n};\n\nexport default getBlockTypeMap;\n","import { BUTTON, COLORS } from 'constants/blockConstants';\nimport createGetBlockTypeName from 'helpers/createGetBlockTypeName';\nimport getBlockTypeMap from 'helpers/getBlockTypeMap';\n\nexport const inputType = BUTTON;\nexport const color = COLORS[BUTTON];\n\nexport const getBlockTypeName = createGetBlockTypeName(inputType);\n\nexport const BUTTON_BLOCK_TYPES = [\n  getBlockTypeName('set'),\n  getBlockTypeName('get'),\n  getBlockTypeName('on_off'),\n];\n\nexport const BLOCKS_MAP = getBlockTypeMap(BUTTON_BLOCK_TYPES);\nexport const variableName = 'Button Name';\n","/* eslint-disable no-underscore-dangle */\n/* eslint-disable prefer-template */\n/* eslint-disable camelcase */\n/* eslint-disable object-shorthand */\n/* eslint-disable func-names */\n/* eslint-disable dot-notation */\nimport Blockly from 'blockly';\nimport 'blockly/javascript';\n\nimport createGenerators from 'helpers/pinInputGenerators';\n\nimport { inputType, color, variableName, BLOCKS_MAP } from './constants';\n\nconst STATEMENT_NAME = 'BUTTON_STMT';\nconst BUTTON_COMMAND = 'BUTTON_COMMAND';\n\nconst { code, block } = createGenerators({ inputType, color });\n\nBlockly.Blocks[BLOCKS_MAP['set']] = {\n  init: block.setGenerator({\n    useText: 'be used for Button named',\n    variableName,\n  }),\n};\n\nBlockly.JavaScript[BLOCKS_MAP['set']] = code.setGenerator({\n  constructorName: 'five.Button',\n});\n\nBlockly.Blocks[BLOCKS_MAP['get']] = {\n  init: block.getGenerator({\n    variableName,\n  }),\n};\n\nBlockly.JavaScript[BLOCKS_MAP['get']] = code.getGenerator();\n\nBlockly.Blocks[BLOCKS_MAP['on_off']] = {\n  init: function () {\n    this.appendDummyInput().appendField('When');\n    this.appendDummyInput(inputType).appendField(\n      new Blockly.FieldVariable(variableName, null, [inputType], inputType),\n      inputType\n    );\n    // this.appendValueInput('BUTTON').setCheck('BUTTON').appendField('When');\n    this.appendDummyInput()\n      .appendField('is')\n      .appendField(\n        new Blockly.FieldDropdown(\n          [\n            ['Down', 'down'],\n            ['Up', 'up'],\n            ['Hold', 'hold'],\n          ]\n          // this.validate\n        ),\n        BUTTON_COMMAND\n      );\n    this.appendStatementInput(STATEMENT_NAME).setCheck(null);\n\n    this.setColour(color);\n    this.setInputsInline(true);\n    this.setPreviousStatement(true, null);\n    this.setNextStatement(true, null);\n    this.setTooltip('');\n    this.setHelpUrl('');\n  },\n  // mutationToDom: function () {\n  //   var container = document.createElement(\"mutation\");\n  //   var holdInput = this.getFieldValue(\"BUTTON_COMMAND\") === \"hold\";\n  //   container.setAttribute(\"hold_input\", holdInput);\n  //   return container;\n  // },\n  // domToMutation: function (xmlElement) {\n  //   var holdInput = xmlElement.getAttribute(\"hold_input\") === \"true\";\n  //   this.updateShape_(holdInput);\n  // },\n\n  // validate: function (newValue) {\n  //   const holdInput = newValue === \"hold\";\n  //   this.getSourceBlock().updateShape_(holdInput);\n  //   return newValue;\n  // },\n  // updateShape_: function (holdInput) {\n\n  //   const inputExists = this.getInput(\"WAIT_TIME\");\n  //   if (holdInput) {\n  //     if (!inputExists) {\n  //       this.appendDummyInput(\"WAIT_TIME\")\n  //         .appendField(\"for\")\n  //         .appendField(new Blockly.FieldNumber(500, 0), \"WAIT_TIME_IN_MS\")\n  //         .appendField(\"milliseconds\");\n  //     }\n  //   } else if (inputExists) {\n  //     this.removeInput(\"WAIT_TIME\");\n  //   }\n  // },\n};\n\nBlockly.JavaScript[BLOCKS_MAP['on_off']] = function (blockIn) {\n  const buttonCommand = blockIn.getFieldValue(BUTTON_COMMAND);\n\n  const statementsMain = Blockly.JavaScript.statementToCode(\n    blockIn,\n    STATEMENT_NAME\n  );\n\n  const codeVariableName = Blockly.JavaScript.variableDB_.getName(\n    blockIn.getFieldValue(inputType),\n    Blockly.Variables.NAME_TYPE\n  );\n\n  const codeOut = `\n  ${codeVariableName}.on(\"${buttonCommand}\", () => {\n    ${statementsMain}\n  });\n  `;\n\n  return codeOut;\n};\n","const GPIOPins = [\n  ['#4', 'P1-7'],\n  ['#5', 'P1-29'],\n  ['#6', 'P1-31'],\n  ['#12', 'P1-32'],\n  ['#13', 'P1-33'],\n  ['#16', 'P1-36'],\n  ['#17', 'P1-11'],\n  ['#18', 'P1-12'],\n  ['#19', 'P1-35'],\n  ['#20', 'P1-38'],\n  ['#21', 'P1-40'],\n  ['#23', 'P1-16'],\n  ['#24', 'P1-18'],\n  ['#25', 'P1-22'],\n  ['#26', 'P1-37'],\n  ['#27', 'P1-13'],\n];\n\nconst gpioMap = GPIOPins.reduce((prev, curr) => {\n  return {\n    ...prev,\n    [curr[0]]: curr[1],\n  };\n}, {});\n\nconst getGPIOBlockName = (name) => `pin_${name.replaceAll('#', '')}`;\n\nexport default GPIOPins;\n\nexport { gpioMap, getGPIOBlockName };\n","/* eslint-disable dot-notation */\n/* eslint-disable func-names, object-shorthand */\nimport Blockly from 'blockly';\nimport 'blockly/javascript';\n\nimport { PIN, COLORS } from 'constants/blockConstants';\nimport GPIOPins, { getGPIOBlockName } from 'constants/GPIOPins';\n\nGPIOPins.forEach((option) => {\n  const [name, value] = option;\n  const blockName = getGPIOBlockName(name);\n\n  Blockly.Blocks[blockName] = {\n    init: function () {\n      this.appendDummyInput().appendField(`Pin ${name}`);\n      this.setOutput(true, PIN);\n      this.setColour(COLORS[PIN]);\n      this.setTooltip('');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blockly.JavaScript[blockName] = function () {\n    const code = `'${value}'`;\n    return [code, Blockly.JavaScript.ORDER_ATOMIC];\n  };\n});\n\n// Blockly.Blocks['pin_a'] = {\n//   init: function () {\n//     this.appendDummyInput().appendField('Pin');\n//     this.setOutput(true, PIN);\n//     this.setColour(230);\n//     this.setTooltip('');\n//     this.setHelpUrl('');\n//   },\n// };\n\n// Blockly.JavaScript['pin_a'] = function () {\n//   const code = `'pin_a'`;\n//   return [code, Blockly.JavaScript.ORDER_ATOMIC];\n// };\n","const PCF8591Pins = ['A0', 'A1', 'A2', 'A3'];\n\nconst getPCF8591PinBlockName = (pinName) => `pin_PCF8591_${pinName}`;\n\nexport default PCF8591Pins;\n\nexport { getPCF8591PinBlockName };\n","/* eslint-disable object-shorthand */\n/* eslint-disable no-underscore-dangle */\n/* eslint-disable func-names */\n/* eslint-disable dot-notation */\nimport Blockly from 'blockly';\nimport 'blockly/javascript';\nimport isNullOrEmpty from 'helpers/isNullOrEmpty';\n\nconst createGenerators = ({ inputType, color }) => {\n  const virtualBoardBlockSetGenerator = ({ variableName, useText }) =>\n    function () {\n      this.appendDummyInput().appendField(useText);\n      this.appendDummyInput(inputType).appendField(\n        new Blockly.FieldVariable(variableName, null, [inputType], inputType),\n        inputType\n      );\n      this.setInputsInline(true);\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(color);\n      this.setTooltip('');\n      this.setHelpUrl('');\n    };\n\n  const virtualBoardCodeSetGenerator = ({ expanderName }) =>\n    function (block) {\n      const codeVariableName = Blockly.JavaScript.variableDB_.getName(\n        block.getFieldValue(inputType),\n        Blockly.Variables.NAME_TYPE\n      );\n\n      const codeOut = `${codeVariableName} = new five.Board.Virtual(\n        new five.Expander(\"${expanderName}\")\n      );`;\n      return codeOut;\n    };\n\n  const virtualBoardBlockGetGenerator = ({ variableName }) =>\n    function () {\n      this.appendDummyInput().appendField(\n        new Blockly.FieldVariable(variableName, null, [inputType], inputType),\n        inputType\n      );\n      this.setOutput(true, inputType);\n      this.setColour(color);\n    };\n\n  const virtualBoardCodeGetGenerator = () =>\n    function (block) {\n      const codeVariableName = Blockly.JavaScript.variableDB_.getName(\n        block.getFieldValue(inputType),\n        Blockly.Variables.NAME_TYPE\n      );\n      const codeOut = codeVariableName;\n      return [codeOut, Blockly.JavaScript.ORDER_ATOMIC];\n    };\n\n  const virtualBoardBlockUseGenerator = ({ variableName, pinType }) =>\n    function () {\n      this.appendDummyInput().appendField('Use');\n      this.appendDummyInput(inputType).appendField(\n        new Blockly.FieldVariable(variableName, null, [inputType], inputType),\n        inputType\n      );\n      this.appendDummyInput().appendField('with ADC pin');\n      this.appendValueInput(pinType).setCheck(pinType);\n      this.appendStatementInput(`${inputType}_STMT`).setCheck(null);\n\n      this.setColour(color);\n      this.setInputsInline(true);\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setTooltip('');\n      this.setHelpUrl('');\n    };\n\n  const virtualBoardCodeUseGenerator = ({ pinType }) =>\n    function (blockIn) {\n      const statementsMain = Blockly.JavaScript.statementToCode(\n        blockIn,\n        `${inputType}_STMT`\n      );\n\n      const pinValue = Blockly.JavaScript.valueToCode(\n        blockIn,\n        pinType,\n        Blockly.JavaScript.ORDER_ATOMIC\n      );\n\n      const codeVariableName = Blockly.JavaScript.variableDB_.getName(\n        blockIn.getFieldValue(inputType),\n        Blockly.Variables.NAME_TYPE\n      );\n\n      if (isNullOrEmpty(pinValue) || isNullOrEmpty(codeVariableName)) {\n        return '';\n      }\n\n      const codeOut = `(() => {\n        const additionalParams = {\n          pin: ${pinValue},\n          board: ${codeVariableName}\n          \n        };\n        ${statementsMain}\n      })();\n      `;\n\n      return codeOut;\n    };\n\n  return {\n    block: {\n      setGenerator: virtualBoardBlockSetGenerator,\n      getGenerator: virtualBoardBlockGetGenerator,\n      useGenerator: virtualBoardBlockUseGenerator,\n    },\n    code: {\n      setGenerator: virtualBoardCodeSetGenerator,\n      getGenerator: virtualBoardCodeGetGenerator,\n      useGenerator: virtualBoardCodeUseGenerator,\n    },\n  };\n};\n\nexport default createGenerators;\n","/* eslint-disable object-shorthand */\n/* eslint-disable no-underscore-dangle */\n/* eslint-disable func-names */\n/* eslint-disable dot-notation */\nimport Blockly from 'blockly';\nimport 'blockly/javascript';\n\nimport { PCF8591, PIN_PCF8591, COLORS } from 'constants/blockConstants';\nimport PCF8591Pins, { getPCF8591PinBlockName } from 'constants/PCF8591Pins';\n\nimport createGenerators from './virtualBoardGenerators';\n\nconst inputType = PCF8591;\nconst color = COLORS[PCF8591];\n\nconst variableName = 'PCF9581 (ADC) Name';\nconst pinType = PIN_PCF8591;\nconst useText = 'Create PCF8591 (ADC) named:';\nconst expanderName = 'PCF8591';\n\nPCF8591Pins.forEach((pinName) => {\n  const blockName = getPCF8591PinBlockName(pinName);\n\n  Blockly.Blocks[blockName] = {\n    init: function () {\n      this.appendDummyInput().appendField(`PCF8591 Pin ${pinName}`);\n      this.setOutput(true, pinType);\n      this.setColour(color);\n      this.setTooltip('');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blockly.JavaScript[blockName] = function () {\n    const code = `'${pinName}'`;\n    return [code, Blockly.JavaScript.ORDER_ATOMIC];\n  };\n});\n\nconst { code, block } = createGenerators({ inputType, color });\n\nBlockly.Blocks['set_PCF8591'] = {\n  init: block.setGenerator({\n    useText,\n    variableName,\n  }),\n};\n\nBlockly.JavaScript['set_PCF8591'] = code.setGenerator({\n  expanderName,\n});\n\nBlockly.Blocks['get_PCF8591'] = {\n  init: block.getGenerator({ variableName }),\n};\n\nBlockly.JavaScript['get_PCF8591'] = code.getGenerator();\n\nBlockly.Blocks['use_PCF8591'] = {\n  init: block.useGenerator({ variableName, pinType }),\n};\n\nBlockly.JavaScript['use_PCF8591'] = code.useGenerator({ pinType });\n","import { SENSOR, COLORS } from 'constants/blockConstants';\nimport createGetBlockTypeName from 'helpers/createGetBlockTypeName';\nimport getBlockTypeMap from 'helpers/getBlockTypeMap';\n\nexport const inputType = SENSOR;\nexport const color = COLORS[SENSOR];\nexport const variableName = 'Sensor Name';\n\nexport const getBlockTypeName = createGetBlockTypeName(inputType);\n\nexport const SENSOR_BLOCK_TYPES = [\n  getBlockTypeName('set'),\n  getBlockTypeName('on_change'),\n  getBlockTypeName('get_value'),\n  getBlockTypeName('get_scaled'),\n  getBlockTypeName('get_fscaled'),\n  getBlockTypeName('boolean_at'),\n  getBlockTypeName('get_boolean'),\n  getBlockTypeName('get_raw'),\n];\n\nexport const SENSOR_BLOCKS_MAP = getBlockTypeMap(SENSOR_BLOCK_TYPES);\n","/* eslint-disable no-underscore-dangle */\n/* eslint-disable prefer-template */\n/* eslint-disable camelcase */\n/* eslint-disable object-shorthand */\n/* eslint-disable func-names */\n/* eslint-disable dot-notation */\n\nimport Blockly from 'blockly';\nimport 'blockly/javascript';\nimport isNullOrEmpty from 'helpers/isNullOrEmpty';\nimport { PIN } from 'constants/blockConstants';\n\nimport { inputType, color, variableName, SENSOR_BLOCKS_MAP } from './constants';\n\nconst createText = 'Create Sensor';\nconst thresholdFieldName = 'THRESHOLD';\nconst frequencyFieldName = 'FREQUENCY_IN_MS';\n\nconst CUSTOM_OPTIONS_OPTION = 'custom options';\nconst sensorOptions = [\n  ['defaults', 'defaults'],\n  [CUSTOM_OPTIONS_OPTION, CUSTOM_OPTIONS_OPTION],\n];\n\nconst CUSTOM_GPIO_OPTION = 'gpio_yes';\nconst customGPIOOptions = [\n  ['No', 'gpio_no'],\n  ['Yes', CUSTOM_GPIO_OPTION],\n];\n\nconst customOptionsXmlAttributeName = 'customOptions';\nconst customGPIOXmlAttributeName = 'customGPIO';\nconst CUSTOM_OPTIONS_DUMMY_INPUT = 'CUSTOM_OPTIONS_DUMMY_INPUT';\nconst PIN_INPUT = 'PIN_INPUT';\n\nconst getCustomOptionsFieldName = (inputTypeIn) =>\n  `${inputTypeIn}_CUSTOM_OPTIONS`;\n\nconst getCustomGPIOFieldName = (inputTypeIn) => `${inputTypeIn}_CUSTOM_GPIO`;\n\nconst getHasCustomOptions = (fieldValue) =>\n  fieldValue === CUSTOM_OPTIONS_OPTION;\n\nconst getHasCustomGPIO = (fieldValue) => fieldValue === CUSTOM_GPIO_OPTION;\n\nBlockly.Blocks[SENSOR_BLOCKS_MAP.set] = {\n  init() {\n    this.appendDummyInput()\n      .appendField(createText)\n      .appendField(\n        new Blockly.FieldVariable(variableName, null, [inputType], inputType),\n        inputType\n      )\n\n      .appendField('with')\n      .appendField(\n        new Blockly.FieldDropdown(sensorOptions, this.validateCustomOptions),\n        getCustomOptionsFieldName(inputType)\n      );\n    this.setInputsInline(true);\n    this.setPreviousStatement(true, null);\n    this.setNextStatement(true, null);\n    this.setColour(color);\n    this.setTooltip('');\n    this.setHelpUrl('');\n  },\n  mutationToDom() {\n    const container = document.createElement('mutation');\n    const customOptionsFieldValue = this.getFieldValue(\n      getCustomOptionsFieldName(inputType)\n    );\n    const hasCustomOptions = getHasCustomOptions(customOptionsFieldValue);\n\n    if (hasCustomOptions) {\n      container.setAttribute(\n        customOptionsXmlAttributeName,\n        customOptionsFieldValue\n      );\n\n      const customGPIOFieldValue = this.getFieldValue(\n        getCustomGPIOFieldName(inputType)\n      );\n\n      const hasCustomGPIO = getHasCustomGPIO(customGPIOFieldValue);\n\n      if (hasCustomGPIO) {\n        container.setAttribute(\n          customGPIOXmlAttributeName,\n          customGPIOFieldValue\n        );\n      }\n    } else {\n      container.setAttribute(customOptionsXmlAttributeName, '');\n      container.setAttribute(customGPIOXmlAttributeName, '');\n    }\n    return container;\n  },\n  domToMutation(xmlElement) {\n    const customOptionsXmlAttribute = xmlElement.getAttribute(\n      customOptionsXmlAttributeName\n    );\n\n    const customGPIOXmlAttribute = xmlElement.getAttribute(\n      customGPIOXmlAttributeName\n    );\n    this.updateShapeCustomOptionShape_(customOptionsXmlAttribute);\n    this.updateShapeGPIOShape_(customGPIOXmlAttribute);\n  },\n\n  validateCustomOptions(newValue) {\n    this.getSourceBlock().updateShapeCustomOptionShape_(newValue);\n    return newValue;\n  },\n  validateGPIO(newValue) {\n    this.getSourceBlock().updateShapeGPIOShape_(newValue);\n    return newValue;\n  },\n  updateShapeCustomOptionShape_(customOptionsXmlAttribute) {\n    const hasCustomOptions = getHasCustomOptions(customOptionsXmlAttribute);\n\n    const customOptionsDummyInputExists = this.getInput(\n      CUSTOM_OPTIONS_DUMMY_INPUT\n    );\n\n    if (hasCustomOptions) {\n      if (!customOptionsDummyInputExists) {\n        this.setInputsInline(false);\n        this.appendDummyInput(CUSTOM_OPTIONS_DUMMY_INPUT)\n          .appendField(' Threshold:')\n          .appendField(new Blockly.FieldNumber(1, 1, 1023), thresholdFieldName)\n          .appendField(' and Frequency:')\n          .appendField(new Blockly.FieldNumber(25, 1), frequencyFieldName) // ;\n          .appendField('milliseconds')\n          // this.appendDummyInput(`${CUSTOM_OPTIONS_DUMMY_INPUT}_A`)\n          .appendField(' Use GPIO?')\n          .appendField(\n            new Blockly.FieldDropdown(customGPIOOptions, this.validateGPIO),\n            getCustomGPIOFieldName(inputType)\n          );\n      }\n    } else if (customOptionsDummyInputExists) {\n      this.removeInput(CUSTOM_OPTIONS_DUMMY_INPUT);\n      //   this.removeInput(`${CUSTOM_OPTIONS_DUMMY_INPUT}_A`);\n      try {\n        this.removeInput(PIN_INPUT);\n      } catch (e) {\n        console.log(e);\n      }\n      this.setInputsInline(true);\n    }\n  },\n  updateShapeGPIOShape_(customGPIOXmlAttribute) {\n    const hasCustomGPIO = getHasCustomGPIO(customGPIOXmlAttribute);\n\n    const customGPIODummyInputExists = this.getInput(PIN_INPUT);\n\n    if (hasCustomGPIO) {\n      if (!customGPIODummyInputExists) {\n        this.appendValueInput(PIN_INPUT)\n          .setCheck(PIN)\n          .setAlign(Blockly.ALIGN_RIGHT)\n          .appendField('GPIO Pin');\n      }\n    } else if (customGPIODummyInputExists) {\n      this.removeInput(PIN_INPUT);\n    }\n  },\n};\n\nBlockly.JavaScript[SENSOR_BLOCKS_MAP.set] = function (block) {\n  const codeVariableName = Blockly.JavaScript.variableDB_.getName(\n    block.getFieldValue(inputType),\n    Blockly.Variables.NAME_TYPE\n  );\n\n  if (isNullOrEmpty(variableName)) {\n    return '';\n  }\n\n  const thresholdValue = block.getFieldValue(thresholdFieldName);\n\n  const frequencyValue = block.getFieldValue(frequencyFieldName);\n\n  const pinValue = Blockly.JavaScript.valueToCode(\n    block,\n    PIN_INPUT,\n    Blockly.JavaScript.ORDER_ATOMIC\n  );\n\n  const args = {};\n  if (!isNullOrEmpty(thresholdValue)) {\n    args.threshold = thresholdValue;\n  }\n  if (!isNullOrEmpty(frequencyValue)) {\n    args.freq = frequencyValue;\n  }\n  if (!isNullOrEmpty(pinValue)) {\n    args.pin = pinValue.replaceAll(\"'\", '');\n  }\n\n  console.log({ args });\n  const argsVariableName = `${codeVariableName}__ARGS`;\n\n  const code = `\n      let ${argsVariableName} = ${JSON.stringify(args)};\n      try {\n          ${argsVariableName} = {\n              ...additionalParams,\n              ...${argsVariableName}\n          } ;\n      } catch(e) {} // do nothing\n  \n      ${codeVariableName} = new five.Sensor(${argsVariableName});`;\n  return code;\n};\n","/* eslint-disable no-underscore-dangle */\n/* eslint-disable prefer-template */\n/* eslint-disable camelcase */\n/* eslint-disable object-shorthand */\n/* eslint-disable func-names */\n/* eslint-disable dot-notation */\n\nimport Blockly from 'blockly';\nimport 'blockly/javascript';\nimport isNullOrEmpty from 'helpers/isNullOrEmpty';\n\nimport { inputType, color, variableName, SENSOR_BLOCKS_MAP } from './constants';\n\nconst SENSOR_EVENT_INPUT = 'SENSOR_EVENT';\nconst SENSOR_ON_STATEMENT = 'SENSOR_ON_STATEMENT';\n\nBlockly.Blocks[SENSOR_BLOCKS_MAP['on_change']] = {\n  init: function () {\n    this.appendDummyInput()\n      .appendField('When sensor: ')\n      .appendField(\n        new Blockly.FieldVariable(variableName, null, [inputType], inputType),\n        inputType\n      );\n    this.appendDummyInput().appendField(\n      new Blockly.FieldDropdown([\n        ['Changes', 'change'],\n        ['Gets any data', 'data'],\n      ]),\n      SENSOR_EVENT_INPUT\n    );\n    this.appendStatementInput(SENSOR_ON_STATEMENT).setCheck(null);\n\n    this.setInputsInline(true);\n    this.setPreviousStatement(true, null);\n    this.setNextStatement(true, null);\n    this.setColour(color);\n  },\n};\n\nBlockly.JavaScript[SENSOR_BLOCKS_MAP['on_change']] = function (blockIn) {\n  const sensorEvent = blockIn.getFieldValue(SENSOR_EVENT_INPUT);\n\n  const sensorVariableNameFieldValue = blockIn.getFieldValue(inputType);\n\n  if (\n    isNullOrEmpty(sensorEvent) ||\n    isNullOrEmpty(sensorVariableNameFieldValue)\n  ) {\n    return '';\n  }\n  const codeVariableName = Blockly.JavaScript.variableDB_.getName(\n    sensorVariableNameFieldValue,\n    Blockly.Variables.NAME_TYPE\n  );\n\n  const statementsMain = Blockly.JavaScript.statementToCode(\n    blockIn,\n    SENSOR_ON_STATEMENT\n  );\n  console.log({ sensorEvent, statementsMain });\n  const codeOut = `\n    ${codeVariableName}.on(\"${sensorEvent}\", () => {\n      ${statementsMain}\n    });\n    `;\n\n  return codeOut;\n};\n","/* eslint-disable no-underscore-dangle */\n/* eslint-disable prefer-template */\n/* eslint-disable camelcase */\n/* eslint-disable object-shorthand */\n/* eslint-disable func-names */\n/* eslint-disable dot-notation */\nimport Blockly from 'blockly';\nimport 'blockly/javascript';\nimport { SENSOR } from 'constants/blockConstants';\nimport isNullOrEmpty from 'helpers/isNullOrEmpty';\n\nconst doSkipOnChange = (event) => {\n  const wrongEvent = event.type !== Blockly.Events.BLOCK_MOVE;\n  const isMovingStarting =\n    event.newParentId === undefined && event.oldParentId !== undefined;\n  return wrongEvent || isMovingStarting;\n};\n\nconst getFirstSurroundedAncestorByType = (block, surroundAncestorType) => {\n  const initialSurroundParent = block.getSurroundParent();\n  let surroundParent = initialSurroundParent;\n  console.group('createGetSensorGenerators.hasSurroundedAncestor');\n  while (surroundParent != null) {\n    console.log({\n      surroundParent,\n      type: surroundParent.type,\n      surroundAncestorType,\n    });\n    if (surroundParent.type === surroundAncestorType) {\n      break;\n    }\n    surroundParent = surroundParent.getSurroundParent();\n  }\n  console.groupEnd();\n  return surroundParent;\n};\n\nconst defaultAdditionalInit = (ref) => {\n  ref.setOutput(true, SENSOR);\n};\n\nconst defaultCodeWrapper = (code) => {\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\n};\n\nconst createGetSensorGenerators = ({ inputType, color, ancestorBlockType }) => {\n  const sensorBlockGetGenerator = ({\n    fieldText,\n    fields = [],\n    additionalInitFunc = defaultAdditionalInit,\n  }) => {\n    return {\n      init: function () {\n        this.appendDummyInput().appendField(fieldText);\n        const that = this;\n        fields.forEach(({ createField, name, text }) => {\n          const field = createField();\n          that.appendDummyInput().appendField(text).appendField(field, name);\n        });\n        additionalInitFunc(this);\n        this.setColour(color);\n        this.setTooltip('');\n        this.setHelpUrl('');\n        this.setOnChange(this._onChange);\n      },\n      _onChange: function (event) {\n        if (doSkipOnChange(event)) {\n          return;\n        }\n        console.group('sensor.onChange');\n        const surroundAncestor = getFirstSurroundedAncestorByType(\n          this,\n          ancestorBlockType\n        );\n        const hasSensorSurround = !isNullOrEmpty(surroundAncestor);\n        const initialSurroundParent = this.getSurroundParent();\n\n        console.log({\n          event,\n          hasSensorSurround,\n          initialSurroundParent,\n          type: event.type,\n        });\n        const isEnabled = this.isEnabled();\n        if (!hasSensorSurround && initialSurroundParent != null) {\n          this.setEnabled(false);\n          if (isEnabled) {\n            // eslint-disable-next-line no-alert\n            alert('This can only be under a \"When Sensor\" block.');\n          }\n        } else {\n          this.setEnabled(true);\n        }\n        console.groupEnd();\n      },\n    };\n  };\n\n  const sensorCodeGetGenerator = ({\n    propertyName,\n    fields = [],\n    codeWrapper = defaultCodeWrapper,\n  }) =>\n    function () {\n      const EMPTY_RESULT = codeWrapper('');\n      const surroundAncestor = getFirstSurroundedAncestorByType(\n        this,\n        ancestorBlockType //\n      );\n      const hasSensorSurround = !isNullOrEmpty(surroundAncestor);\n\n      if (!hasSensorSurround) {\n        return EMPTY_RESULT;\n      }\n      const sensorVariableNameFieldValue = surroundAncestor.getFieldValue(\n        inputType\n      );\n      console.log({ sensorVariableNameFieldValue });\n      if (isNullOrEmpty(sensorVariableNameFieldValue)) {\n        return EMPTY_RESULT;\n      }\n      const fieldValues = [];\n      for (let i = 0; i < fields.length; i += 1) {\n        const { name } = fields[i];\n        const fieldValue = this.getFieldValue(name);\n        if (isNullOrEmpty(fieldValue)) {\n          return EMPTY_RESULT;\n        }\n        fieldValues.push(fieldValue);\n      }\n\n      const sensorVariableName = Blockly.JavaScript.variableDB_.getName(\n        sensorVariableNameFieldValue,\n        Blockly.Variables.NAME_TYPE\n      );\n      console.log({ sensorVariableName, length: fields.length });\n      const updatedPropertyName =\n        fields.length === 0\n          ? propertyName\n          : `${propertyName}(${fieldValues.join(',')})`;\n      const code = `${sensorVariableName}.${updatedPropertyName}`;\n      const result = codeWrapper(code);\n      console.log({ result, updatedPropertyName, propertyName, fieldValues });\n      return result;\n    };\n\n  return {\n    code: { get: sensorCodeGetGenerator },\n    block: { get: sensorBlockGetGenerator },\n  };\n};\n\nexport default createGetSensorGenerators;\n","/* eslint-disable no-underscore-dangle */\n/* eslint-disable prefer-template */\n/* eslint-disable camelcase */\n/* eslint-disable object-shorthand */\n/* eslint-disable func-names */\n/* eslint-disable dot-notation */\nimport Blockly from 'blockly';\nimport 'blockly/javascript';\n\nimport {\n  inputType,\n  color,\n  SENSOR_BLOCKS_MAP,\n  getBlockTypeName,\n} from './constants';\n\nimport createGetSensorGenerators from './createGetSensorGenerators';\n\nconst ancestorBlockType = getBlockTypeName('on_change');\n\nconst { code, block } = createGetSensorGenerators({\n  inputType,\n  color,\n  ancestorBlockType,\n});\n\nBlockly.Blocks[SENSOR_BLOCKS_MAP['get_value']] = block.get({\n  fieldText: 'Sensor value',\n});\n\nBlockly.JavaScript[SENSOR_BLOCKS_MAP['get_value']] = code.get({\n  propertyName: 'value',\n});\n\nconst SCALE_FIELD_MIN_NAME = 'SCALE_FIELD_MIN';\nconst SCALE_FIELD_MAX_NAME = 'SCALE_FIELD_MAX';\n\nconst scaleFields = [\n  {\n    createField: () => new Blockly.FieldNumber(0, 0, 1023),\n    name: SCALE_FIELD_MIN_NAME,\n    text: 'minimum: ',\n  },\n  {\n    createField: () => new Blockly.FieldNumber(1023, 0, 1023),\n    name: SCALE_FIELD_MAX_NAME,\n    text: 'maximum: ',\n  },\n];\n\nBlockly.Blocks[SENSOR_BLOCKS_MAP['get_scaled']] = block.get({\n  fieldText: 'Scale sensor value ',\n  fields: scaleFields,\n});\n\nBlockly.JavaScript[SENSOR_BLOCKS_MAP['get_scaled']] = code.get({\n  propertyName: 'scaleTo',\n  fields: scaleFields,\n});\n\nconst FSCALE_FIELD_MIN_NAME = 'FSCALE_FIELD_MIN';\nconst FSCALE_FIELD_MAX_NAME = 'FSCALE_FIELD_MAX';\nconst floatingScaleFields = [\n  {\n    createField: () => new Blockly.FieldNumber(0, 0, 1023),\n    name: FSCALE_FIELD_MIN_NAME,\n    text: 'minimum: ',\n  },\n  {\n    createField: () => new Blockly.FieldNumber(1023, 0, 1023),\n    name: FSCALE_FIELD_MAX_NAME,\n    text: 'maximum: ',\n  },\n];\n\nBlockly.Blocks[SENSOR_BLOCKS_MAP['get_fscaled']] = block.get({\n  fieldText: 'Scale sensor value to decimal',\n  fields: floatingScaleFields,\n});\n\nBlockly.JavaScript[SENSOR_BLOCKS_MAP['get_fscaled']] = code.get({\n  propertyName: 'fscaleTo',\n  fields: floatingScaleFields,\n});\n\nconst BOOLEAN_AT_FIELD_NAME = 'BOOLEAN_AT';\nconst booleanAtFields = [\n  {\n    createField: () => new Blockly.FieldNumber(0, 0, 1023),\n    name: BOOLEAN_AT_FIELD_NAME,\n    text: 'boolean at: ',\n  },\n];\n\nBlockly.Blocks[SENSOR_BLOCKS_MAP['boolean_at']] = block.get({\n  fieldText: 'Set ',\n  fields: booleanAtFields,\n  additionalInitFunc: (ref) => {\n    ref.setPreviousStatement(true, null);\n    ref.setNextStatement(true, null);\n    ref.setInputsInline(true);\n  },\n});\n\nBlockly.JavaScript[SENSOR_BLOCKS_MAP['boolean_at']] = code.get({\n  propertyName: 'booleanAt',\n  fields: booleanAtFields,\n  codeWrapper: (codeIn) => `${codeIn};\\n`,\n});\n\nBlockly.Blocks[SENSOR_BLOCKS_MAP['get_boolean']] = block.get({\n  fieldText: 'Sensor boolean',\n});\n\nBlockly.JavaScript[SENSOR_BLOCKS_MAP['get_boolean']] = code.get({\n  propertyName: 'boolean',\n});\n\nBlockly.Blocks[SENSOR_BLOCKS_MAP['get_raw']] = block.get({\n  fieldText: 'Sensor raw value',\n});\n\nBlockly.JavaScript[SENSOR_BLOCKS_MAP['get_raw']] = code.get({\n  propertyName: 'raw',\n});\n","import { PIEZO, COLORS } from 'constants/blockConstants';\nimport createGetBlockTypeName from 'helpers/createGetBlockTypeName';\nimport getBlockTypeMap from 'helpers/getBlockTypeMap';\n\nexport const inputType = PIEZO;\nexport const color = COLORS[PIEZO];\nexport const variableName = 'Sensor Name';\n\nexport const getBlockTypeName = createGetBlockTypeName(inputType);\n\nexport const PIEZO_BLOCK_TYPES = [\n  getBlockTypeName('set'),\n  getBlockTypeName('play'),\n  getBlockTypeName('note'),\n  getBlockTypeName('play_freq'),\n  getBlockTypeName('off'),\n];\n\nexport const BLOCKS_MAP = getBlockTypeMap(PIEZO_BLOCK_TYPES);\n\nconst piezeNotesMapOrig = {\n  // from johnny-five/lib/piezo.js\n  c0: 16,\n  'c#0': 17,\n  d0: 18,\n  'd#0': 19,\n  e0: 21,\n  f0: 22,\n  'f#0': 23,\n  g0: 25,\n  'g#0': 26,\n  a0: 28,\n  'a#0': 29,\n  b0: 31,\n  c1: 33,\n  'c#1': 35,\n  d1: 37,\n  'd#1': 39,\n  e1: 41,\n  f1: 44,\n  'f#1': 47,\n  g1: 49,\n  'g#1': 52,\n  a1: 55,\n  'a#1': 58,\n  b1: 62,\n  c2: 65,\n  'c#2': 69,\n  d2: 73,\n  'd#2': 78,\n  e2: 82,\n  f2: 87,\n  'f#2': 93,\n  g2: 98,\n  'g#2': 104,\n  a2: 110,\n  'a#2': 117,\n  b2: 124,\n  c3: 131,\n  'c#3': 139,\n  d3: 147,\n  'd#3': 156,\n  e3: 165,\n  f3: 175,\n  'f#3': 185,\n  g3: 196,\n  'g#3': 208,\n  a3: 220,\n  'a#3': 233,\n  b3: 247,\n  c4: 262,\n  'c#4': 277,\n  d4: 294,\n  'd#4': 311,\n  e4: 330,\n  f4: 349,\n  'f#4': 370,\n  g4: 392,\n  'g#4': 415,\n  a4: 440,\n  'a#4': 466,\n  b4: 494,\n  c5: 523,\n  'c#5': 554,\n  d5: 587,\n  'd#5': 622,\n  e5: 659,\n  f5: 698,\n  'f#5': 740,\n  g5: 784,\n  'g#5': 831,\n  a5: 880,\n  'a#5': 932,\n  b5: 988,\n  c6: 1047,\n  'c#6': 1109,\n  d6: 1175,\n  'd#6': 1245,\n  e6: 1319,\n  f6: 1397,\n  'f#6': 1480,\n  g6: 1568,\n  'g#6': 1661,\n  a6: 1760,\n  'a#6': 1865,\n  b6: 1976,\n  c7: 2093,\n  'c#7': 2217,\n  d7: 2349,\n  'd#7': 2489,\n  e7: 2637,\n  f7: 2794,\n  'f#7': 2960,\n  g7: 3136,\n  'g#7': 3322,\n  a7: 3520,\n  'a#7': 3729,\n  b7: 3951,\n  c8: 4186,\n  'c#8': 4435,\n  d8: 4699,\n  'd#8': 4978,\n  e8: 5274,\n  f8: 5588,\n  'f#8': 5920,\n  g8: 6272,\n  'g#8': 6645,\n  a8: 7040,\n  'a#8': 7459,\n  b8: 7902,\n};\n\nexport const piezeNotesMap = Object.keys(piezeNotesMapOrig).reduce(\n  (acc, cur) => {\n    return {\n      ...acc,\n      [cur]: piezeNotesMapOrig[cur] * 100,\n    };\n  },\n  {}\n);\n","/* eslint-disable object-shorthand */\n/* eslint-disable no-underscore-dangle */\n/* eslint-disable func-names */\n/* eslint-disable dot-notation */\nimport Blockly from 'blockly';\nimport 'blockly/javascript';\nimport isNullOrEmpty from 'helpers/isNullOrEmpty';\nimport createGenerators from 'helpers/pinInputGenerators';\n\nimport {\n  inputType,\n  color,\n  BLOCKS_MAP,\n  getBlockTypeName,\n  piezeNotesMap,\n} from './constants';\n\nconst { code, block } = createGenerators({ inputType, color });\n\nconst variableName = 'Piezo Name';\nconst STATEMENT_NAME = 'PIEZO_PLAY_STATEMENT';\nconst TEMPO_FIELD = 'PIZEO_TEMPO_FIELD';\n\nconst NOTE_OPTIONS = Object.keys(piezeNotesMap).map((key) => {\n  return [key, `${piezeNotesMap[key]}`];\n});\n\nNOTE_OPTIONS.push(['Silence', 'null']);\n\nconst NOTE_FIELD = 'PIEZO_NOTE_FIELD';\nconst NOTE_LENGTH_FIELD = 'PIEZO_NOTE_LENGTH_FIELD';\nconst FREQUENCY_FIELD = 'PIEZO_FREQUENCY_FIELD';\nconst DURATION_IN_MS_FIELD = 'PIEZO_DURATION_IN_MS';\n\nconsole.group('piezo');\nconsole.log({ BLOCKS_MAP });\nBlockly.Blocks[BLOCKS_MAP['set']] = {\n  init: block.setGenerator({\n    useText: 'used for piezo named',\n    variableName,\n  }),\n};\n\nBlockly.JavaScript[BLOCKS_MAP['set']] = code.setGenerator({\n  constructorName: 'five.Piezo',\n});\n\nBlockly.Blocks[BLOCKS_MAP['play']] = {\n  init: function () {\n    this.appendDummyInput().appendField('With');\n    this.appendDummyInput(inputType).appendField(\n      new Blockly.FieldVariable(variableName, null, [inputType], inputType),\n      inputType\n    );\n    this.appendDummyInput()\n      .appendField('play at')\n      .appendField(new Blockly.FieldNumber(150, 1, 1000), TEMPO_FIELD)\n      .appendField('beats per minute');\n    this.appendStatementInput(STATEMENT_NAME).setCheck([\n      getBlockTypeName('note'),\n    ]);\n\n    this.setColour(color);\n    this.setInputsInline(true);\n    this.setPreviousStatement(true, null);\n    this.setNextStatement(true, null);\n    this.setTooltip('');\n    this.setHelpUrl('');\n  },\n};\n\nBlockly.JavaScript[BLOCKS_MAP['play']] = function (blockIn) {\n  const piezoTempo = blockIn.getFieldValue(TEMPO_FIELD);\n\n  const statementsMain = Blockly.JavaScript.statementToCode(\n    blockIn,\n    STATEMENT_NAME\n  );\n\n  const variableFieldValue = blockIn.getFieldValue(inputType);\n\n  if (\n    isNullOrEmpty(statementsMain) ||\n    isNullOrEmpty(piezoTempo) ||\n    isNullOrEmpty(variableFieldValue)\n  ) {\n    return '';\n  }\n\n  const codeVariableName = Blockly.JavaScript.variableDB_.getName(\n    variableFieldValue,\n    Blockly.Variables.NAME_TYPE\n  );\n  const codeOut = `\n    ${codeVariableName}.play({\n        temp: ${piezoTempo},\n        song: [${statementsMain}]\n    });\n    `;\n\n  return codeOut;\n};\n\nBlockly.Blocks[BLOCKS_MAP['note']] = {\n  init: function () {\n    this.appendDummyInput()\n      .appendField('Play Note')\n\n      .appendField(new Blockly.FieldDropdown(NOTE_OPTIONS), NOTE_FIELD);\n\n    this.appendDummyInput()\n      .appendField(' for ')\n      .appendField(\n        new Blockly.FieldNumber(1.5, 0.25, Infinity, 0.25),\n        NOTE_LENGTH_FIELD\n      )\n      .appendField('beats');\n    this.setInputsInline(true);\n    this.setPreviousStatement(true, null);\n    this.setNextStatement(true, null);\n    this.setColour(color);\n    this.setTooltip('');\n    this.setHelpUrl('');\n  },\n};\nBlockly.JavaScript[BLOCKS_MAP['note']] = function (blockIn) {\n  const piezoNote = blockIn.getFieldValue(NOTE_FIELD);\n  const piezoNoteLength = blockIn.getFieldValue(NOTE_LENGTH_FIELD);\n\n  if (isNullOrEmpty(piezoNoteLength)) {\n    return '';\n  }\n  const codeOut = `[${piezoNote}, ${piezoNoteLength}],\\n`;\n  return codeOut;\n};\n\nBlockly.Blocks[BLOCKS_MAP['play_freq']] = {\n  init: function () {\n    this.appendDummyInput(inputType)\n      .appendField('Make')\n      .appendField(\n        new Blockly.FieldVariable(variableName, null, [inputType], inputType),\n        inputType\n      );\n    this.appendDummyInput().appendField(' play at frequency:');\n    this.appendValueInput(FREQUENCY_FIELD).setCheck('Number');\n    this.appendDummyInput().appendField('for:');\n    this.appendValueInput(DURATION_IN_MS_FIELD).setCheck('Number');\n    this.appendDummyInput().appendField('milliseconds');\n\n    this.setInputsInline(true);\n    this.setPreviousStatement(true, null);\n    this.setNextStatement(true, null);\n    this.setColour(color);\n    this.setTooltip('');\n    this.setHelpUrl('');\n  },\n};\n\nBlockly.JavaScript[BLOCKS_MAP['play_freq']] = function (blockIn) {\n  const frequencyValue = Blockly.JavaScript.valueToCode(\n    blockIn,\n    FREQUENCY_FIELD,\n    Blockly.JavaScript.ORDER_ATOMIC\n  );\n  const durationValue = Blockly.JavaScript.valueToCode(\n    blockIn,\n    DURATION_IN_MS_FIELD,\n    Blockly.JavaScript.ORDER_ATOMIC\n  );\n\n  const variableFieldValue = blockIn.getFieldValue(inputType);\n\n  if (\n    isNullOrEmpty(variableFieldValue) ||\n    isNullOrEmpty(frequencyValue) ||\n    isNullOrEmpty(durationValue)\n  ) {\n    return '';\n  }\n\n  const codeVariableName = Blockly.JavaScript.variableDB_.getName(\n    variableFieldValue,\n    Blockly.Variables.NAME_TYPE\n  );\n  const codeOut = `${codeVariableName}.frequency(${frequencyValue}, ${durationValue});\\n`;\n  return codeOut;\n};\n\nBlockly.Blocks[BLOCKS_MAP['off']] = {\n  init: function () {\n    this.appendDummyInput(inputType)\n      .appendField('Make')\n      .appendField(\n        new Blockly.FieldVariable(variableName, null, [inputType], inputType),\n        inputType\n      );\n    this.appendDummyInput().appendField('turn off');\n    this.setInputsInline(true);\n    this.setPreviousStatement(true, null);\n    this.setNextStatement(true, null);\n    this.setColour(color);\n    this.setTooltip('');\n    this.setHelpUrl('');\n  },\n};\n\nBlockly.JavaScript[BLOCKS_MAP['off']] = function (blockIn) {\n  const variableFieldValue = blockIn.getFieldValue(inputType);\n\n  if (isNullOrEmpty(variableFieldValue)) {\n    return '';\n  }\n\n  const codeVariableName = Blockly.JavaScript.variableDB_.getName(\n    variableFieldValue,\n    Blockly.Variables.NAME_TYPE\n  );\n  const codeOut = `${codeVariableName}.off();\\n`;\n  return codeOut;\n};\nconsole.groupEnd();\n","import {\n  LED,\n  BUTTON,\n  PIN,\n  PCF8591,\n  SENSOR,\n  PIEZO,\n  COLORS,\n} from 'constants/blockConstants';\nimport GPIOPins, { getGPIOBlockName } from 'constants/GPIOPins';\nimport PCF8591Pins, { getPCF8591PinBlockName } from 'constants/PCF8591Pins';\nimport { SENSOR_BLOCK_TYPES } from 'customBlocks/sensor/constants';\nimport { PIEZO_BLOCK_TYPES } from 'customBlocks/piezo/constants';\nimport { BUTTON_BLOCK_TYPES } from 'customBlocks/button/constants';\n\nconst blockTypeMapper = (blockType) => {\n  return { type: blockType };\n};\n\nconst SENSOR_BLOCKS = SENSOR_BLOCK_TYPES.map(blockTypeMapper);\n\nconst PIEZO_BLOCKS = PIEZO_BLOCK_TYPES.map(blockTypeMapper);\n\nconst BUTTON_BLOCKS = BUTTON_BLOCK_TYPES.map(blockTypeMapper);\n\nconst GPIOpinBlocks = GPIOPins.map((option) => {\n  const [name] = option;\n  const blockName = getGPIOBlockName(name);\n  return {\n    type: blockName,\n  };\n});\n\nconst PCF8591PinBlocks = PCF8591Pins.map((name) => {\n  const blockName = getPCF8591PinBlockName(name);\n\n  return {\n    type: blockName,\n  };\n});\n\nconst toolboxCategories = [\n  {\n    name: 'Required',\n    colour: '#A5995B',\n    blocks: [\n      {\n        type: 'board_setup',\n      },\n    ],\n  },\n  {\n    name: 'Pins',\n    colour: COLORS[PIN],\n    blocks: GPIOpinBlocks,\n  },\n\n  {\n    name: 'LED',\n    colour: COLORS[LED],\n    blocks: [\n      {\n        type: 'set_led',\n      },\n      {\n        type: 'get_led',\n      },\n      {\n        type: 'led_on_off',\n      },\n    ],\n  },\n  {\n    name: 'Piezo',\n    colour: COLORS[PIEZO],\n    blocks: [...PIEZO_BLOCKS],\n  },\n  {\n    name: 'Button',\n    colour: COLORS[BUTTON],\n    blocks: [...BUTTON_BLOCKS],\n  },\n  {\n    name: 'PCF9581 (ADC)',\n    colour: COLORS[PCF8591],\n    blocks: [\n      {\n        type: 'set_PCF8591',\n      },\n      {\n        type: 'get_PCF8591',\n      },\n      {\n        type: 'use_PCF8591',\n      },\n      ...PCF8591PinBlocks,\n    ],\n  },\n  {\n    name: 'Sensor',\n    colour: COLORS[SENSOR],\n    blocks: [...SENSOR_BLOCKS],\n  },\n  {\n    name: 'Variables',\n    custom: 'VARIABLE',\n    colour: '#a55b80',\n  },\n  {\n    name: 'Logic',\n    colour: '#5C81A6',\n    blocks: [\n      { type: 'controls_if' },\n      { type: 'logic_compare' },\n      { type: 'logic_operation' },\n      { type: 'logic_negate' },\n      { type: 'logic_boolean' },\n      { type: 'logic_null' },\n      { type: 'logic_ternary' },\n    ],\n  },\n  {\n    name: 'Math',\n    colour: '#5B67A5',\n    blocks: [\n      { type: 'math_number' },\n\n      { type: 'math_arithmetic' },\n\n      { type: 'math_single' },\n\n      { type: 'math_trig' },\n\n      { type: 'math_constant' },\n      { type: 'math_number_property' },\n\n      { type: 'math_round' },\n\n      { type: 'math_on_list' },\n\n      { type: 'math_modulo' },\n\n      { type: 'math_constrain' },\n\n      { type: 'math_random_int' },\n\n      { type: 'math_random_float' },\n    ],\n  },\n\n  {\n    name: 'Text',\n    colour: '#5ba58c',\n    blocks: [\n      {\n        type: 'text',\n      },\n      { type: 'text_print' },\n      {\n        type: 'text_join',\n      },\n      {\n        type: 'text_append',\n      },\n      {\n        type: 'text_length',\n      },\n      {\n        type: 'text_isEmpty',\n      },\n      {\n        type: 'text_indexOf',\n      },\n      {\n        type: 'text_charAt',\n      },\n      {\n        type: 'text_getSubstring',\n      },\n      {\n        type: 'text_changeCase',\n      },\n      {\n        type: 'text_trim',\n      },\n    ],\n  },\n  {\n    name: 'Loops',\n    colour: '#5ba55b',\n    blocks: [\n      { type: 'controls_repeat_ext' },\n      { type: 'controls_whileUntil' },\n      { type: 'controls_for' },\n      { type: 'controls_forEach' },\n      { type: 'controls_flow_statements' },\n    ],\n  },\n  {\n    name: 'Lists',\n    colour: '#745ba5',\n    blocks: [\n      { type: 'lists_create_with' },\n      { type: 'lists_repeat' },\n      { type: 'lists_length' },\n      { type: 'lists_isEmpty' },\n      { type: 'lists_indexOf' },\n      { type: 'lists_getIndex' },\n      { type: 'lists_setIndex' },\n      { type: 'lists_getSublist' },\n      { type: 'lists_split' },\n      { type: 'lists_sort' },\n    ],\n  },\n];\n\nexport default toolboxCategories;\n","import Blockly from 'blockly';\n\nimport prettier from 'prettier/standalone';\nimport parserBabel from 'prettier/parser-babel';\n\nconst workspaceDidChangeInner = (\n  workspace,\n  initializedRef,\n  workspaceRef,\n  xml,\n  handleToolboxChange\n) => {\n  // eslint-disable-next-line no-param-reassign\n  workspaceRef.current = workspace;\n  if (!initializedRef.current && workspace) {\n    console.group('workspaceDidChangeInner.initialization');\n    console.log('Initializing Workspace');\n    console.groupEnd();\n  }\n  // console.log({ workspace });\n  const newXml = Blockly.Xml.domToText(Blockly.Xml.workspaceToDom(workspace));\n  const code = Blockly.JavaScript.workspaceToCode(workspace);\n  const rearrangedCode = `\n      const { RaspiIO } = require('raspi-io');\n      const five = require(\"johnny-five\");\n      const board = new five.Board({\n        io: new RaspiIO()\n      });\n    \n      ${code}`.replaceAll('window.alert', 'console.log');\n\n  let prettierCode = rearrangedCode;\n\n  try {\n    prettierCode = prettier.format(rearrangedCode, {\n      parser: 'babel',\n      plugins: [parserBabel],\n    });\n  } catch (err) {\n    console.group('Prettier Error');\n    console.error(err);\n    console.groupEnd();\n  }\n  if (xml !== newXml || !initializedRef.current) {\n    console.group('workspaceDidChangerInner.xml changed');\n    console.log('setting state');\n    console.groupEnd();\n    handleToolboxChange({ code: prettierCode, xml: newXml });\n  }\n  // eslint-disable-next-line no-param-reassign\n  initializedRef.current = true;\n};\n\nexport default workspaceDidChangeInner;\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport ReactBlockly from 'react-blockly';\nimport Blockly from 'blockly';\nimport { LED, BUTTON, SENSOR, PCF8591, PIEZO } from 'constants/blockConstants';\nimport GPIOPins, { getGPIOBlockName } from 'constants/GPIOPins';\nimport PCF8591Pins, { getPCF8591PinBlockName } from 'constants/PCF8591Pins';\n\nimport toolboxCategories from './toolboxCategories';\n\nimport workspaceDidChangeInner from './workspaceDidChangeInner';\n\nconst GPIOPinBlocksLimiters = GPIOPins.reduce((acc, option) => {\n  const [name] = option;\n  const key = getGPIOBlockName(name);\n  return {\n    ...acc,\n    [key]: 1,\n  };\n}, {});\n\nconst PCF8591PinBlocksLimiters = PCF8591Pins.reduce((acc, name) => {\n  const key = getPCF8591PinBlockName(name);\n\n  return {\n    ...acc,\n    [key]: 1,\n  };\n}, {});\n\nconst blockLimiters = {\n  ...GPIOPinBlocksLimiters,\n  ...PCF8591PinBlocksLimiters,\n};\n\nconst onImportXmlError = (e) => {\n  console.group('xml error');\n  console.error(e);\n  console.groupEnd();\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nconst BlocklyToolbox = ({ toolboxState, handleToolboxChange }) => {\n  console.group('BlocklyToolbox');\n  const { xml } = toolboxState;\n  // console.log({ xml });\n\n  const workspaceRef = useRef();\n  const initializedRef = useRef(false);\n\n  console.log({ workspaceRef });\n\n  const createVariable = (type) => {\n    if (workspaceRef.current) {\n      Blockly.Variables.createVariableButtonHandler(\n        workspaceRef.current,\n        null,\n        type\n      );\n    }\n  };\n\n  const workspaceDidChange = (workspace) =>\n    workspaceDidChangeInner(\n      workspace,\n      initializedRef,\n      workspaceRef,\n      xml,\n      handleToolboxChange\n    );\n\n  const classes = useStyles();\n  console.groupEnd();\n\n  return (\n    <>\n      <div className={classes.root}>\n        <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          size=\"small\"\n          onClick={() => createVariable(LED)}\n        >\n          Create LED\n        </Button>\n        <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          size=\"small\"\n          onClick={() => createVariable(BUTTON)}\n        >\n          Create Button\n        </Button>\n\n        <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          size=\"small\"\n          onClick={() => createVariable(PCF8591)}\n        >\n          Create PCF8591\n        </Button>\n        <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          size=\"small\"\n          onClick={() => createVariable(SENSOR)}\n        >\n          Create Sensor\n        </Button>\n        <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          size=\"small\"\n          onClick={() => createVariable(PIEZO)}\n        >\n          Create Piezo\n        </Button>\n      </div>\n      <ReactBlockly\n        ref={workspaceRef}\n        toolboxCategories={toolboxCategories}\n        initialXml={xml}\n        wrapperDivClassName=\"fill-height\"\n        workspaceConfiguration={{\n          grid: {\n            spacing: 20,\n            length: 3,\n            colour: '#ccc',\n            snap: true,\n          },\n          maxInstances: blockLimiters,\n        }}\n        workspaceDidChange={workspaceDidChange}\n        onImportXmlError={onImportXmlError}\n        processToolboxCategory={(toolboxCategory) => {\n          console.group('BlocklyToolbox.processToolboxCategory');\n          console.log({ toolboxCategory });\n          console.groupEnd();\n          return toolboxCategory;\n        }}\n      />\n    </>\n  );\n};\n\nBlocklyToolbox.propTypes = {\n  toolboxState: PropTypes.shape({\n    xml: PropTypes.string,\n    code: PropTypes.string,\n  }).isRequired,\n  handleToolboxChange: PropTypes.func.isRequired,\n};\nexport default BlocklyToolbox;\n","import React from 'react';\nimport socketio from 'socket.io-client';\n\nconst ENDPOINT = `${window.location.hostname}:8080`;\nconst socket = socketio.connect(ENDPOINT, { reconnect: true });\nconst SocketContext = React.createContext();\n\nexport { socket, SocketContext };\n","import React, { useState, useEffect, useContext, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from '@material-ui/core/Button';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\nimport PanToolIcon from '@material-ui/icons/PanTool';\nimport PowerSettingsNewIcon from '@material-ui/icons/PowerSettingsNew';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Dialog from '@material-ui/core/Dialog';\nimport { SocketContext } from 'socket-config/socket';\n\nconst ConfirmationDialogRaw = (props) => {\n  const { onClose, open, ...other } = props;\n\n  const handleCancel = () => {\n    onClose(false);\n  };\n\n  const handleOk = () => {\n    onClose(true);\n  };\n\n  return (\n    <Dialog\n      disableBackdropClick\n      disableEscapeKeyDown\n      maxWidth=\"xs\"\n      aria-labelledby=\"confirmation-dialog-title\"\n      open={open}\n      {...other}\n    >\n      <DialogTitle id=\"confirmation-dialog-title\">Power Off?</DialogTitle>\n      <DialogContent dividers>\n        Are you sure you want to power off?\n      </DialogContent>\n      <DialogActions>\n        <Button autoFocus onClick={handleCancel} color=\"primary\">\n          No\n        </Button>\n        <Button onClick={handleOk} color=\"primary\">\n          yes\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nConfirmationDialogRaw.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n};\n\nconst GreenButton = withStyles((theme) => ({\n  root: {\n    color: theme.palette.getContrastText(theme.palette.success.main),\n    backgroundColor: theme.palette.success.main,\n    '&:hover': {\n      backgroundColor: theme.palette.success.dark,\n    },\n  },\n}))(Button);\n\nconst Terminal = ({ isProjectRunning, projectName, projectCode }) => {\n  console.group('Terminal');\n  const [response, setResponse] = useState('');\n  const [value, setValue] = useState('');\n  const messagesEndRef = useRef(null);\n  const [open, setOpen] = useState(false);\n\n  const socket = useContext(SocketContext);\n  // console.log({ socket });\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  const handleClose = (newValue) => {\n    console.group('handleClose');\n    setOpen(false);\n\n    if (newValue) {\n      console.log('emitting powerOff');\n      socket.emit('powerOff');\n    }\n    console.groupEnd();\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [response]);\n\n  useEffect(() => {\n    socket.on('message', (data) => {\n      console.group('on message');\n      const buf = String.fromCharCode.apply(null, new Uint8Array(data));\n      console.log({ buf });\n      setResponse((prev) => `${prev}<p class=\"terminal\">${buf}</p>`);\n      console.groupEnd();\n    });\n    socket.on('exit', (data) => {\n      console.group('on exit');\n      console.log({ data });\n      console.groupEnd();\n      setResponse((prev) => `${prev}<p class=\"terminal\">${data}</p>`);\n    });\n  }, [socket]);\n\n  const handleSubmit = (event) => {\n    console.group('handleSubmit');\n    console.log({ value });\n    console.log('emitting');\n    socket.emit('message', value);\n\n    setValue('');\n    event.preventDefault();\n    console.groupEnd();\n  };\n\n  const handleRun = () => {\n    console.group('handleRun');\n    console.log('emitting');\n\n    socket.emit('copyProject', { projectCode });\n\n    setTimeout(() => {\n      const runProgramCmd =\n        'sudo node /home/pi/Development/johnny-five/index.js';\n\n      socket.emit('message', runProgramCmd);\n      socket.emit('projectStarted');\n    }, 1000);\n\n    console.groupEnd();\n  };\n\n  const handleStop = () => {\n    console.group('handleStop');\n    console.log('emitting');\n\n    const exitProgramCmd = `.exit`;\n    socket.emit('message', exitProgramCmd);\n    setTimeout(() => {\n      socket.emit('stopProject');\n    }, 500);\n\n    console.groupEnd();\n  };\n\n  const useStyles = makeStyles((theme) => ({\n    buttonBar: {\n      '& > *': {\n        margin: theme.spacing(1),\n      },\n      width: '100%',\n      position: 'fixed',\n    },\n    terminalContainer: {\n      paddingTop: '46px',\n    },\n    shutdown: {\n      float: 'right',\n    },\n  }));\n\n  const classes = useStyles();\n  console.groupEnd();\n\n  return (\n    <>\n      <div className={classes.buttonBar}>\n        <GreenButton\n          variant=\"contained\"\n          size=\"small\"\n          startIcon={<PlayCircleOutlineIcon />}\n          disabled={\n            isProjectRunning || projectName == null || projectCode === ''\n          }\n          onClick={handleRun}\n        >\n          Play\n        </GreenButton>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          size=\"small\"\n          startIcon={<PanToolIcon />}\n          disabled={!isProjectRunning}\n          onClick={handleStop}\n        >\n          Stop\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          size=\"small\"\n          className={classes.shutdown}\n          startIcon={<PowerSettingsNewIcon />}\n          disabled={isProjectRunning}\n          onClick={() => setOpen(true)}\n        >\n          Turn off\n        </Button>\n        <ConfirmationDialogRaw\n          id=\"power-off-dialog\"\n          keepMounted\n          open={open}\n          onClose={handleClose}\n        />\n      </div>\n      <div className={`terminal ${classes.terminalContainer}`}>\n        <div>\n          {/* eslint-disable react/self-closing-comp, react/no-danger */}\n          <div\n            className=\"terminal\"\n            dangerouslySetInnerHTML={{ __html: response }}\n          ></div>\n          {/* eslint-enable */}\n          <div ref={messagesEndRef} />\n        </div>\n        <form className=\"terminal\" onSubmit={handleSubmit}>\n          &gt;{' '}\n          <input\n            className=\"terminal\"\n            value={value}\n            onChange={(event) => setValue(event.target.value)}\n          />\n        </form>\n      </div>\n    </>\n  );\n};\n\nTerminal.propTypes = {\n  isProjectRunning: PropTypes.bool.isRequired,\n  projectName: PropTypes.string,\n  projectCode: PropTypes.string,\n};\n\nexport default Terminal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nconst ConfirmDeleteDialog = (props) => {\n  const { onClose, open, file, ...other } = props;\n\n  const handleCancel = () => {\n    onClose(false);\n  };\n\n  const handleOk = () => {\n    onClose(true);\n  };\n\n  return (\n    <Dialog\n      disableBackdropClick\n      disableEscapeKeyDown\n      maxWidth=\"xs\"\n      aria-labelledby=\"confirmation-dialog-title\"\n      open={open}\n      {...other}\n    >\n      <DialogTitle id=\"confirmation-dialog-title\">Delete File?</DialogTitle>\n      <DialogContent dividers>\n        Are you sure you want to delete {file}?\n      </DialogContent>\n      <DialogActions>\n        <Button autoFocus onClick={handleCancel} color=\"primary\">\n          Cancel\n        </Button>\n        <Button onClick={handleOk} color=\"secondary\">\n          Delete\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nConfirmDeleteDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  file: PropTypes.string.isRequired,\n};\n\nexport default ConfirmDeleteDialog;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nconst CopyDialog = (props) => {\n  const { onClose, open, ...other } = props;\n\n  const [newFileName, setNewFileName] = useState('');\n\n  const handleCancel = () => {\n    onClose(false, newFileName);\n    setNewFileName('');\n  };\n\n  const handleOk = () => {\n    onClose(true, newFileName);\n    setNewFileName('');\n  };\n\n  const handleChange = (event) => {\n    setNewFileName(event.target.value);\n  };\n\n  return (\n    <Dialog\n      disableBackdropClick\n      disableEscapeKeyDown\n      maxWidth=\"xs\"\n      aria-labelledby=\"confirmation-dialog-title\"\n      open={open}\n      {...other}\n    >\n      <DialogTitle id=\"confirmation-dialog-title\">Delete File?</DialogTitle>\n      <DialogContent dividers>\n        <DialogContentText>\n          Enter the new project name to copy to\n        </DialogContentText>\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          id=\"name\"\n          label=\"New Project Name\"\n          type=\"string\"\n          value={newFileName}\n          onChange={handleChange}\n          fullWidth\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button autoFocus onClick={handleCancel} color=\"primary\">\n          Cancel\n        </Button>\n        <Button\n          onClick={handleOk}\n          color=\"secondary\"\n          disabled={newFileName === ''}\n        >\n          Copy\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nCopyDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n};\n\nexport default CopyDialog;\n","import React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nimport ListItem from '@material-ui/core/ListItem';\nimport Avatar from '@material-ui/core/Avatar';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\n\nimport ConfirmDeleteDialog from './ConfirmDeleteDialog';\nimport CopyDialog from './CopyDialog';\n\nconst ProjectListItem = ({\n  selectedIndex,\n  file,\n  index,\n  handleListItemClick,\n  handleDelete,\n  handleCopy,\n}) => {\n  console.group('ProjectListItem');\n  const [isConfirmDeleteDialogOpen, setIsConfirmDeleteDialogOpen] = useState(\n    false\n  );\n  const [isCopyDialogOpen, setIsCopyDialogOpen] = useState(false);\n\n  const handleConfirmDeleteDialogClose = useCallback(\n    (isConfirmed) => {\n      console.group('handleConfirmDeleteDialogClose');\n      setIsConfirmDeleteDialogOpen(false);\n\n      if (isConfirmed) {\n        handleDelete(file);\n      }\n      console.groupEnd();\n    },\n    [file, handleDelete]\n  );\n\n  const handleCopyDialogClose = useCallback(\n    (isConfirmed, newFileName) => {\n      console.group('handleCopyDialogClose');\n      setIsCopyDialogOpen(false);\n\n      if (isConfirmed) {\n        handleCopy(file, `${newFileName}.xml`);\n      }\n      console.groupEnd();\n    },\n    [file, handleCopy]\n  );\n\n  console.groupEnd();\n  return (\n    <>\n      <ListItem\n        button\n        selected={selectedIndex === index}\n        onClick={(event) => handleListItemClick(event, file)}\n      >\n        <ListItemAvatar>\n          <Avatar>\n            <DescriptionIcon />\n          </Avatar>\n        </ListItemAvatar>\n        <ListItemText primary={file} />\n        <ListItemSecondaryAction>\n          <IconButton\n            edge=\"end\"\n            aria-label=\"delete\"\n            onClick={() => setIsConfirmDeleteDialogOpen(true)}\n          >\n            <DeleteIcon />\n          </IconButton>\n          <IconButton\n            edge=\"end\"\n            aria-label=\"copy\"\n            onClick={() => setIsCopyDialogOpen(true)}\n          >\n            <FileCopyIcon />\n          </IconButton>\n        </ListItemSecondaryAction>\n      </ListItem>\n      <ConfirmDeleteDialog\n        keepMounted\n        open={isConfirmDeleteDialogOpen}\n        file={file}\n        onClose={handleConfirmDeleteDialogClose}\n      />\n      <CopyDialog\n        keepMounted\n        open={isCopyDialogOpen}\n        onClose={handleCopyDialogClose}\n      />\n    </>\n  );\n};\n\nProjectListItem.propTypes = {\n  selectedIndex: PropTypes.number,\n  file: PropTypes.string.isRequired,\n  handleListItemClick: PropTypes.func.isRequired,\n  index: PropTypes.number.isRequired,\n  handleDelete: PropTypes.func.isRequired,\n  handleCopy: PropTypes.func.isRequired,\n};\n\nexport default ProjectListItem;\n","import React, { useState, useEffect, useContext, useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport { SocketContext } from 'socket-config/socket';\n\nimport ProjectListItem from './ProjectListItem';\n\nconst useStyles = makeStyles((theme) => ({\n  listRoot: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n  },\n  root: {\n    flexGrow: 1,\n    margin: theme.spacing(1),\n  },\n  formRoot: {\n    '& > *': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  },\n}));\n\nconst ProjectManager = ({ handleProjectNameSelection }) => {\n  console.group('ProjectManager');\n  const socket = useContext(SocketContext);\n  const [files, setFiles] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  // TODO jte check create doesn't exist\n  const handleDelete = useCallback(\n    (fileName) => {\n      console.group('handleDelete');\n\n      console.log('emitting deleteFile');\n      socket.emit('deleteFile', { fileName });\n\n      console.groupEnd();\n    },\n    [socket]\n  );\n\n  const handleCopy = useCallback(\n    (fileName, newFileName) => {\n      console.group('handleCopy');\n\n      console.log('emitting handleCopy');\n      socket.emit('copyFile', { fileName, newFileName });\n\n      console.groupEnd();\n    },\n    [socket]\n  );\n  const classes = useStyles();\n  const [selectedIndex, setSelectedIndex] = React.useState(null);\n\n  const handleListItemClick = useCallback(\n    (event, file) => {\n      console.group('ProjectManager.handleListItemClick');\n      console.log({ file });\n      console.groupEnd();\n      handleProjectNameSelection(file);\n      setSelectedIndex(null);\n    },\n    [handleProjectNameSelection]\n  );\n\n  const handleInputChange = useCallback((event) => {\n    setInputValue(event.target.value);\n  }, []);\n\n  useEffect(() => {\n    console.log('emit getFiles');\n    socket.emit('getFiles');\n\n    socket.on('files', (data) => {\n      console.group('ProjectManager.on files');\n      console.log({ data });\n      console.groupEnd();\n      setFiles(data);\n    });\n  }, [socket]);\n\n  let fileList = null;\n  if (files !== null) {\n    fileList = files.map((file, index) => (\n      <ProjectListItem\n        key={file}\n        file={file}\n        index={index}\n        selectedIndex={selectedIndex}\n        handleDelete={handleDelete}\n        handleCopy={handleCopy}\n        handleListItemClick={handleListItemClick}\n      />\n    ));\n  }\n  console.groupEnd();\n\n  return (\n    <>\n      <div className={classes.root}>\n        <Grid container spacing={3}>\n          <Grid item xs={6}>\n            <div className={classes.listRoot}>\n              {fileList === null ? (\n                <CircularProgress />\n              ) : (\n                <List\n                  component=\"nav\"\n                  aria-label=\"project files\"\n                  subheader={\n                    <ListSubheader component=\"div\" id=\"nested-list-subheader\">\n                      Saved Projects\n                    </ListSubheader>\n                  }\n                >\n                  {fileList}\n                </List>\n              )}\n            </div>\n          </Grid>\n          <Grid item xs={6}>\n            <form className={classes.formRoot} noValidate autoComplete=\"off\">\n              <TextField\n                id=\"standard-basic\"\n                label=\"New Project Name\"\n                value={inputValue}\n                onChange={handleInputChange}\n              />\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                disabled={inputValue.trim().length === 0 || fileList === null}\n                onClick={() => {\n                  const projectName = `${inputValue.trim()}.xml`;\n                  handleProjectNameSelection(projectName);\n                  setInputValue('');\n                }}\n              >\n                Create New Project\n              </Button>\n            </form>\n          </Grid>\n        </Grid>\n      </div>\n    </>\n  );\n};\n\nProjectManager.propTypes = {\n  handleProjectNameSelection: PropTypes.func.isRequired,\n};\n\nexport default ProjectManager;\n","const getLastItem = (queue) => {\n  const { length } = queue;\n  if (length > 0) {\n    const currentItem = queue[length - 1];\n    return currentItem;\n  }\n  return null;\n};\n\nconst createLogHelper = (mutedGroups) => {\n  const queue = [];\n  const groupFunc = console.group;\n  console.group = (name = undefined) => {\n    queue.push(name);\n    if (!mutedGroups.includes(name)) {\n      groupFunc(name);\n    }\n  };\n  const groupEndFunc = console.groupEnd;\n  console.groupEnd = () => {\n    const name = queue.pop();\n    if (!mutedGroups.includes(name)) {\n      groupEndFunc();\n    }\n  };\n\n  const logFunc = console.log;\n  console.log = (...values) => {\n    const lastItem = getLastItem(queue);\n    if (lastItem != null && !mutedGroups.includes(lastItem)) {\n      logFunc(...values);\n    }\n  };\n};\n\nexport default createLogHelper;\n","/* eslint-disable import/newline-after-import, import/first, import/order */\nimport './App.css';\nimport './customBlocks/custom_Blocks';\nimport './customBlocks/required/board_setup_blocks';\nimport './customBlocks/led/led';\nimport './customBlocks/button/button';\nimport './customBlocks/GPIOpins/pins';\nimport './customBlocks/virtualBoards/PCF8591';\nimport './customBlocks/sensor/sensor';\nimport './customBlocks/piezo/piezo';\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport BlocklyToolbox from 'features/blockly-toolbox/BlocklyToolbox';\nimport Terminal from './Terminal';\nimport ProjectManager from 'features/project-manager/ProjectManager';\n\nimport { SocketContext, socket } from 'socket-config/socket';\nimport createLogHelper from 'helpers/createLogHelper';\n\ncreateLogHelper([\n  'createGetSensorGenerators',\n  'sensor.onChange',\n  'App',\n  'ProjectManager',\n  'ProjectListItem',\n  'Terminal',\n  'ProjectManager.on files',\n  'ProjectManager.handleListItemClick',\n  'App.getFile Effect',\n  'App.on file',\n  'BlocklyToolbox.processToolboxCategory',\n  'workspaceDidChangeInner.initialization',\n  'workspaceDidChangerInner.xml changed',\n  'createGetSensorGenerators.hasSurroundedAncestor',\n  'BlocklyToolbox',\n]);\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {children}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nconst initialXml =\n  '<xml xmlns=\"https://developers.google.com/blockly/xml\"><block type=\"board_setup\" id=\"{`$}^q8GM8vjCjK?)f5u\" x=\"90\" y=\"30\"></block></xml>';\n\nconst App = () => {\n  console.group('App');\n  const [toolboxState, setToolboxState] = useState({\n    code: '',\n    xml: initialXml,\n  });\n  const [tabValue, setTabValue] = useState(0);\n  const [projectName, setProjectName] = useState(null);\n\n  const [isProjectRunning, setIsProjectRunning] = useState(false);\n\n  const handleTabChange = (event, newValue) => {\n    setTabValue(newValue);\n  };\n\n  const handleProjectNameSelection = useCallback((projectNameToUpdate) => {\n    setProjectName(projectNameToUpdate);\n  }, []);\n\n  const handleToolboxChange = useCallback(\n    ({ xml, code }) => {\n      setToolboxState({ xml, code });\n      if (projectName !== null) {\n        // console.group('handleToolboxChange');\n        // console.log({ xml, projectName });\n        // console.groupEnd();\n        socket.emit('saveFile', { contents: xml, fileName: projectName });\n      }\n    },\n    [projectName]\n  );\n\n  useEffect(() => {\n    if (projectName !== null) {\n      console.group('App.getFile Effect');\n      console.log({ projectName });\n      console.groupEnd();\n      socket.emit('getFile', { fileName: projectName });\n    }\n  }, [projectName]);\n\n  useEffect(() => {\n    socket.on('connect', () => {\n      console.log('Client has connected to the server!');\n    });\n\n    socket.on('file', (file) => {\n      console.group('App.on file');\n      if (file === '') {\n        console.log('blank file');\n        setToolboxState({ code: '', xml: initialXml });\n      } else {\n        const buf = String.fromCharCode.apply(null, new Uint8Array(file));\n        console.log({ buf });\n        setToolboxState({ code: '', xml: buf });\n      }\n      setTabValue(1);\n      console.groupEnd();\n    });\n\n    socket.on('projectStatus', (status) => {\n      console.group('on projectStatus');\n      console.log({ status });\n      setIsProjectRunning(status);\n      console.groupEnd();\n    });\n  }, []);\n\n  console.groupEnd();\n  return (\n    <SocketContext.Provider value={socket}>\n      <AppBar position=\"static\">\n        <Tabs\n          value={tabValue}\n          onChange={handleTabChange}\n          aria-label=\"Blockly Tabs\"\n        >\n          <Tab label=\"Projects\" disabled={isProjectRunning} />\n          <Tab\n            label=\"Blockly\"\n            disabled={projectName === null || isProjectRunning}\n          />\n          <Tab\n            label=\"Code\"\n            disabled={projectName === null || isProjectRunning}\n          />\n          <Tab\n            label=\"XML\"\n            disabled={projectName === null || isProjectRunning}\n          />\n          <Tab label=\"Run\" />\n        </Tabs>\n      </AppBar>\n      <TabPanel value={tabValue} index={0}>\n        <ProjectManager\n          handleProjectNameSelection={handleProjectNameSelection}\n        />\n      </TabPanel>\n      <TabPanel value={tabValue} index={1}>\n        {tabValue === 1 && (\n          <BlocklyToolbox\n            toolboxState={toolboxState}\n            handleToolboxChange={handleToolboxChange}\n          />\n        )}\n      </TabPanel>\n      <TabPanel value={tabValue} index={2}>\n        <pre>{toolboxState.code}</pre>\n      </TabPanel>\n      <TabPanel value={tabValue} index={3}>\n        <pre id=\"generated-xml\">{toolboxState.xml}</pre>\n      </TabPanel>\n      <TabPanel value={tabValue} index={4}>\n        <Terminal\n          isProjectRunning={isProjectRunning}\n          projectCode={toolboxState.code}\n          projectName={projectName}\n        />\n      </TabPanel>\n    </SocketContext.Provider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}